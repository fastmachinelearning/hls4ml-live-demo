// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pixel_unpack.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pixel_unpack::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pixel_unpack::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> pixel_unpack::ap_ST_fsm_state1 = "1";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state2 = "10";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp0_stage1 = "1000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state6 = "10000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp1_stage0 = "100000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp1_stage1 = "1000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state10 = "10000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp2_stage0 = "100000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp2_stage1 = "1000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp2_stage2 = "10000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp2_stage3 = "100000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state16 = "1000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp3_stage0 = "10000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state19 = "100000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp4_stage0 = "1000000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp4_stage1 = "10000000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp4_stage2 = "100000000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_pp4_stage3 = "1000000000000000000";
const sc_lv<20> pixel_unpack::ap_ST_fsm_state27 = "10000000000000000000";
const bool pixel_unpack::ap_const_boolean_1 = true;
const sc_lv<32> pixel_unpack::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> pixel_unpack::ap_const_lv32_F = "1111";
const bool pixel_unpack::ap_const_boolean_0 = false;
const sc_lv<32> pixel_unpack::ap_const_lv32_10 = "10000";
const sc_lv<32> pixel_unpack::ap_const_lv32_11 = "10001";
const sc_lv<32> pixel_unpack::ap_const_lv32_D = "1101";
const sc_lv<32> pixel_unpack::ap_const_lv32_8 = "1000";
const sc_lv<32> pixel_unpack::ap_const_lv32_5 = "101";
const sc_lv<32> pixel_unpack::ap_const_lv32_2 = "10";
const sc_lv<32> pixel_unpack::ap_const_lv32_12 = "10010";
const sc_lv<32> pixel_unpack::ap_const_lv32_9 = "1001";
const sc_lv<32> pixel_unpack::ap_const_lv32_A = "1010";
const sc_lv<32> pixel_unpack::ap_const_lv32_B = "1011";
const sc_lv<32> pixel_unpack::ap_const_lv32_6 = "110";
const sc_lv<32> pixel_unpack::ap_const_lv32_3 = "11";
const int pixel_unpack::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> pixel_unpack::ap_const_lv32_1 = "1";
const sc_lv<32> pixel_unpack::ap_const_lv32_4 = "100";
const sc_lv<1> pixel_unpack::ap_const_lv1_1 = "1";
const sc_lv<1> pixel_unpack::ap_const_lv1_0 = "0";
const sc_lv<32> pixel_unpack::ap_const_lv32_18 = "11000";
const sc_lv<32> pixel_unpack::ap_const_lv32_1F = "11111";
const sc_lv<32> pixel_unpack::ap_const_lv32_17 = "10111";
const sc_lv<32> pixel_unpack::ap_const_lv32_13 = "10011";

pixel_unpack::pixel_unpack(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pixel_unpack_AXILiteS_s_axi_U = new pixel_unpack_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("pixel_unpack_AXILiteS_s_axi_U");
    pixel_unpack_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    pixel_unpack_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    pixel_unpack_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    pixel_unpack_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    pixel_unpack_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    pixel_unpack_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    pixel_unpack_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    pixel_unpack_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    pixel_unpack_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    pixel_unpack_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    pixel_unpack_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    pixel_unpack_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    pixel_unpack_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    pixel_unpack_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    pixel_unpack_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    pixel_unpack_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    pixel_unpack_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    pixel_unpack_AXILiteS_s_axi_U->ACLK(control);
    pixel_unpack_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    pixel_unpack_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    pixel_unpack_AXILiteS_s_axi_U->mode(mode);
    pixel_unpack_AXILiteS_s_axi_U->clk(ap_clk);
    pixel_unpack_AXILiteS_s_axi_U->rst(ap_rst_n_control_inv);
    regslice_both_stream_in_32_data_V_U = new regslice_both<32>("regslice_both_stream_in_32_data_V_U");
    regslice_both_stream_in_32_data_V_U->ap_clk(ap_clk);
    regslice_both_stream_in_32_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_in_32_data_V_U->data_in(stream_in_32_TDATA);
    regslice_both_stream_in_32_data_V_U->vld_in(stream_in_32_TVALID);
    regslice_both_stream_in_32_data_V_U->ack_in(regslice_both_stream_in_32_data_V_U_ack_in);
    regslice_both_stream_in_32_data_V_U->data_out(stream_in_32_TDATA_int);
    regslice_both_stream_in_32_data_V_U->vld_out(stream_in_32_TVALID_int);
    regslice_both_stream_in_32_data_V_U->ack_out(stream_in_32_TREADY_int);
    regslice_both_stream_in_32_data_V_U->apdone_blk(regslice_both_stream_in_32_data_V_U_apdone_blk);
    regslice_both_stream_in_32_user_V_U = new regslice_both<1>("regslice_both_stream_in_32_user_V_U");
    regslice_both_stream_in_32_user_V_U->ap_clk(ap_clk);
    regslice_both_stream_in_32_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_in_32_user_V_U->data_in(stream_in_32_TUSER);
    regslice_both_stream_in_32_user_V_U->vld_in(stream_in_32_TVALID);
    regslice_both_stream_in_32_user_V_U->ack_in(regslice_both_stream_in_32_user_V_U_ack_in);
    regslice_both_stream_in_32_user_V_U->data_out(stream_in_32_TUSER_int);
    regslice_both_stream_in_32_user_V_U->vld_out(regslice_both_stream_in_32_user_V_U_vld_out);
    regslice_both_stream_in_32_user_V_U->ack_out(stream_in_32_TREADY_int);
    regslice_both_stream_in_32_user_V_U->apdone_blk(regslice_both_stream_in_32_user_V_U_apdone_blk);
    regslice_both_stream_in_32_last_V_U = new regslice_both<1>("regslice_both_stream_in_32_last_V_U");
    regslice_both_stream_in_32_last_V_U->ap_clk(ap_clk);
    regslice_both_stream_in_32_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_in_32_last_V_U->data_in(stream_in_32_TLAST);
    regslice_both_stream_in_32_last_V_U->vld_in(stream_in_32_TVALID);
    regslice_both_stream_in_32_last_V_U->ack_in(regslice_both_stream_in_32_last_V_U_ack_in);
    regslice_both_stream_in_32_last_V_U->data_out(stream_in_32_TLAST_int);
    regslice_both_stream_in_32_last_V_U->vld_out(regslice_both_stream_in_32_last_V_U_vld_out);
    regslice_both_stream_in_32_last_V_U->ack_out(stream_in_32_TREADY_int);
    regslice_both_stream_in_32_last_V_U->apdone_blk(regslice_both_stream_in_32_last_V_U_apdone_blk);
    regslice_both_stream_out_24_data_V_U = new regslice_both<24>("regslice_both_stream_out_24_data_V_U");
    regslice_both_stream_out_24_data_V_U->ap_clk(ap_clk);
    regslice_both_stream_out_24_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_out_24_data_V_U->data_in(stream_out_24_TDATA_int);
    regslice_both_stream_out_24_data_V_U->vld_in(stream_out_24_TVALID_int);
    regslice_both_stream_out_24_data_V_U->ack_in(stream_out_24_TREADY_int);
    regslice_both_stream_out_24_data_V_U->data_out(stream_out_24_TDATA);
    regslice_both_stream_out_24_data_V_U->vld_out(regslice_both_stream_out_24_data_V_U_vld_out);
    regslice_both_stream_out_24_data_V_U->ack_out(stream_out_24_TREADY);
    regslice_both_stream_out_24_data_V_U->apdone_blk(regslice_both_stream_out_24_data_V_U_apdone_blk);
    regslice_both_stream_out_24_user_V_U = new regslice_both<1>("regslice_both_stream_out_24_user_V_U");
    regslice_both_stream_out_24_user_V_U->ap_clk(ap_clk);
    regslice_both_stream_out_24_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_out_24_user_V_U->data_in(stream_out_24_TUSER_int);
    regslice_both_stream_out_24_user_V_U->vld_in(stream_out_24_TVALID_int);
    regslice_both_stream_out_24_user_V_U->ack_in(regslice_both_stream_out_24_user_V_U_ack_in_dummy);
    regslice_both_stream_out_24_user_V_U->data_out(stream_out_24_TUSER);
    regslice_both_stream_out_24_user_V_U->vld_out(regslice_both_stream_out_24_user_V_U_vld_out);
    regslice_both_stream_out_24_user_V_U->ack_out(stream_out_24_TREADY);
    regslice_both_stream_out_24_user_V_U->apdone_blk(regslice_both_stream_out_24_user_V_U_apdone_blk);
    regslice_both_stream_out_24_last_V_U = new regslice_both<1>("regslice_both_stream_out_24_last_V_U");
    regslice_both_stream_out_24_last_V_U->ap_clk(ap_clk);
    regslice_both_stream_out_24_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_stream_out_24_last_V_U->data_in(stream_out_24_TLAST_int);
    regslice_both_stream_out_24_last_V_U->vld_in(stream_out_24_TVALID_int);
    regslice_both_stream_out_24_last_V_U->ack_in(regslice_both_stream_out_24_last_V_U_ack_in_dummy);
    regslice_both_stream_out_24_last_V_U->data_out(stream_out_24_TLAST);
    regslice_both_stream_out_24_last_V_U->vld_out(regslice_both_stream_out_24_last_V_U_vld_out);
    regslice_both_stream_out_24_last_V_U->ack_out(stream_out_24_TREADY);
    regslice_both_stream_out_24_last_V_U->apdone_blk(regslice_both_stream_out_24_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp3_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp4_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp4_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp4_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp4_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_01001);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_01001);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp2_stage0_11001);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage1);

    SC_METHOD(thread_ap_block_pp2_stage1_01001);

    SC_METHOD(thread_ap_block_pp2_stage1_11001);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage1_subdone);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage2);

    SC_METHOD(thread_ap_block_pp2_stage2_01001);

    SC_METHOD(thread_ap_block_pp2_stage2_11001);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage2_subdone);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage3);

    SC_METHOD(thread_ap_block_pp2_stage3_01001);

    SC_METHOD(thread_ap_block_pp2_stage3_11001);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp2_stage3_subdone);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp3_stage0);

    SC_METHOD(thread_ap_block_pp3_stage0_01001);
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp3_stage0_11001);
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp3_stage0_subdone);
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage0);

    SC_METHOD(thread_ap_block_pp4_stage0_01001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp4_stage0_11001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage0_subdone);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage1);

    SC_METHOD(thread_ap_block_pp4_stage1_01001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp4_stage1_11001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage1_subdone);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage2);

    SC_METHOD(thread_ap_block_pp4_stage2_01001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_pp4_stage2_11001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage2_subdone);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( stream_in_32_TVALID_int );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage3);

    SC_METHOD(thread_ap_block_pp4_stage3_01001);

    SC_METHOD(thread_ap_block_pp4_stage3_11001);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_pp4_stage3_subdone);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_ap_block_state11_pp2_stage0_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state12_pp2_stage1_iter0);

    SC_METHOD(thread_ap_block_state13_pp2_stage2_iter0);

    SC_METHOD(thread_ap_block_state14_pp2_stage3_iter0);

    SC_METHOD(thread_ap_block_state15_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state17_pp3_stage0_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state18_pp3_stage0_iter1);

    SC_METHOD(thread_ap_block_state20_pp4_stage0_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state21_pp4_stage1_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state22_pp4_stage2_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state23_pp4_stage3_iter0);

    SC_METHOD(thread_ap_block_state24_pp4_stage0_iter1);

    SC_METHOD(thread_ap_block_state25_pp4_stage1_iter1);

    SC_METHOD(thread_ap_block_state26_pp4_stage2_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter0);
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_ap_block_state8_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state9_pp1_stage0_iter1);

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_enable_pp3);
    sensitive << ( ap_idle_pp3 );

    SC_METHOD(thread_ap_enable_pp4);
    sensitive << ( ap_idle_pp4 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );

    SC_METHOD(thread_ap_idle_pp3);
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_enable_reg_pp3_iter1 );

    SC_METHOD(thread_ap_idle_pp4);
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );

    SC_METHOD(thread_ap_rst_n_control_inv);
    sensitive << ( ap_rst_n_control );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_138_p1);
    sensitive << ( stream_in_32_TLAST_int );

    SC_METHOD(thread_grp_fu_153_p4);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_grp_read_fu_98_p2);
    sensitive << ( mode_0_data_reg );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mode_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( regslice_both_stream_out_24_data_V_U_apdone_blk );

    SC_METHOD(thread_or_ln46_1_fu_313_p2);
    sensitive << ( empty_reg_438_2 );
    sensitive << ( or_ln46_fu_307_p2 );

    SC_METHOD(thread_or_ln46_fu_307_p2);
    sensitive << ( empty_4_reg_449_2 );
    sensitive << ( stream_in_32_TLAST_int );

    SC_METHOD(thread_or_ln718_1_fu_300_p2);
    sensitive << ( empty_reg_438_1 );
    sensitive << ( or_ln718_fu_294_p2 );

    SC_METHOD(thread_or_ln718_fu_294_p2);
    sensitive << ( empty_4_reg_449_1 );
    sensitive << ( stream_in_32_TUSER_int );

    SC_METHOD(thread_p_Result_14_1_fu_212_p4);
    sensitive << ( reg_183 );
    sensitive << ( reg_187 );
    sensitive << ( reg_191 );

    SC_METHOD(thread_p_Result_2_fu_203_p3);
    sensitive << ( grp_fu_153_p4 );
    sensitive << ( trunc_ln414_fu_199_p1 );

    SC_METHOD(thread_p_Result_3_1_fu_333_p3);
    sensitive << ( reg_187 );
    sensitive << ( trunc_ln647_1_reg_455 );

    SC_METHOD(thread_p_Result_3_2_fu_341_p3);
    sensitive << ( reg_195 );
    sensitive << ( trunc_ln647_2_reg_470 );

    SC_METHOD(thread_stream_in_32_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_block_pp4_stage0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_block_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_block_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_block_pp3_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( stream_in_32_TVALID_int );

    SC_METHOD(thread_stream_in_32_TREADY);
    sensitive << ( stream_in_32_TVALID );
    sensitive << ( regslice_both_stream_in_32_data_V_U_ack_in );

    SC_METHOD(thread_stream_in_32_TREADY_int);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_block_pp4_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_block_pp4_stage1_11001 );
    sensitive << ( ap_block_pp3_stage0_11001 );
    sensitive << ( ap_block_pp4_stage2_11001 );

    SC_METHOD(thread_stream_out_24_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_block_pp4_stage0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_block_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_block_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_block_pp3_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp4_stage3 );
    sensitive << ( ap_block_pp4_stage3 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_block_pp2_stage1 );
    sensitive << ( ap_CS_fsm_pp2_stage2 );
    sensitive << ( ap_block_pp2_stage2 );
    sensitive << ( ap_CS_fsm_pp2_stage3 );
    sensitive << ( ap_block_pp2_stage3 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( stream_out_24_TREADY_int );

    SC_METHOD(thread_stream_out_24_TDATA_int);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage3 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_CS_fsm_pp2_stage2 );
    sensitive << ( ap_CS_fsm_pp2_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( p_Result_2_fu_203_p3 );
    sensitive << ( p_Result_14_1_fu_212_p4 );
    sensitive << ( zext_ln414_4_fu_227_p1 );
    sensitive << ( zext_ln414_5_fu_232_p1 );
    sensitive << ( zext_ln414_fu_241_p1 );
    sensitive << ( zext_ln414_1_fu_246_p1 );
    sensitive << ( zext_ln414_2_fu_251_p1 );
    sensitive << ( zext_ln414_3_fu_256_p1 );
    sensitive << ( trunc_ln647_3_fu_261_p1 );
    sensitive << ( trunc_ln647_reg_444 );
    sensitive << ( p_Result_3_3_reg_475 );
    sensitive << ( p_Result_3_1_fu_333_p3 );
    sensitive << ( p_Result_3_2_fu_341_p3 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_block_pp2_stage0_01001 );
    sensitive << ( ap_block_pp2_stage1_01001 );
    sensitive << ( ap_block_pp2_stage2_01001 );
    sensitive << ( ap_block_pp2_stage3_01001 );
    sensitive << ( ap_block_pp3_stage0_01001 );
    sensitive << ( ap_block_pp4_stage2_01001 );
    sensitive << ( ap_block_pp4_stage3_01001 );
    sensitive << ( ap_block_pp4_stage0_01001 );
    sensitive << ( ap_block_pp4_stage1_01001 );

    SC_METHOD(thread_stream_out_24_TLAST_int);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage3 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_CS_fsm_pp2_stage2 );
    sensitive << ( ap_CS_fsm_pp2_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( last_2_reg_358 );
    sensitive << ( last_1_reg_378 );
    sensitive << ( last_reg_398 );
    sensitive << ( or_ln46_1_reg_465 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_block_pp2_stage0_01001 );
    sensitive << ( ap_block_pp2_stage1_01001 );
    sensitive << ( ap_block_pp2_stage2_01001 );
    sensitive << ( ap_block_pp2_stage3_01001 );
    sensitive << ( ap_block_pp3_stage0_01001 );
    sensitive << ( ap_block_pp4_stage2_01001 );
    sensitive << ( ap_block_pp4_stage3_01001 );
    sensitive << ( ap_block_pp4_stage0_01001 );
    sensitive << ( ap_block_pp4_stage1_01001 );
    sensitive << ( stream_in_32_TLAST_int );

    SC_METHOD(thread_stream_out_24_TUSER_int);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage3 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_CS_fsm_pp2_stage2 );
    sensitive << ( ap_CS_fsm_pp2_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( or_ln718_1_fu_300_p2 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_block_pp2_stage0_01001 );
    sensitive << ( ap_block_pp2_stage1_01001 );
    sensitive << ( ap_block_pp2_stage2_01001 );
    sensitive << ( ap_block_pp2_stage3_01001 );
    sensitive << ( ap_block_pp3_stage0_01001 );
    sensitive << ( ap_block_pp4_stage2_01001 );
    sensitive << ( ap_block_pp4_stage3_01001 );
    sensitive << ( ap_block_pp4_stage0_01001 );
    sensitive << ( ap_block_pp4_stage1_01001 );
    sensitive << ( stream_in_32_TUSER_int );

    SC_METHOD(thread_stream_out_24_TVALID);
    sensitive << ( regslice_both_stream_out_24_data_V_U_vld_out );

    SC_METHOD(thread_stream_out_24_TVALID_int);
    sensitive << ( ap_CS_fsm_pp4_stage0 );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage1 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage3 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_CS_fsm_pp2_stage2 );
    sensitive << ( ap_CS_fsm_pp2_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_block_pp4_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_block_pp4_stage1_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp2_stage1_11001 );
    sensitive << ( ap_block_pp2_stage2_11001 );
    sensitive << ( ap_block_pp2_stage3_11001 );
    sensitive << ( ap_block_pp3_stage0_11001 );
    sensitive << ( ap_block_pp4_stage2_11001 );
    sensitive << ( ap_block_pp4_stage3_11001 );

    SC_METHOD(thread_trunc_ln414_fu_199_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_1_fu_270_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_2_fu_319_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_3_fu_261_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_4_fu_237_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_5_fu_223_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_trunc_ln647_fu_266_p1);
    sensitive << ( stream_in_32_TDATA_int );

    SC_METHOD(thread_zext_ln414_1_fu_246_p1);
    sensitive << ( reg_183 );

    SC_METHOD(thread_zext_ln414_2_fu_251_p1);
    sensitive << ( reg_191 );

    SC_METHOD(thread_zext_ln414_3_fu_256_p1);
    sensitive << ( reg_187 );

    SC_METHOD(thread_zext_ln414_4_fu_227_p1);
    sensitive << ( trunc_ln647_5_fu_223_p1 );

    SC_METHOD(thread_zext_ln414_5_fu_232_p1);
    sensitive << ( reg_195 );

    SC_METHOD(thread_zext_ln414_fu_241_p1);
    sensitive << ( trunc_ln647_4_fu_237_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp4_iter0 );
    sensitive << ( ap_CS_fsm_pp4_stage2 );
    sensitive << ( ap_CS_fsm_pp3_stage0 );
    sensitive << ( ap_enable_reg_pp3_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp4_iter1 );
    sensitive << ( ap_enable_reg_pp3_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_read_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage1_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp2_stage3_subdone );
    sensitive << ( ap_block_pp2_stage0_subdone );
    sensitive << ( ap_block_pp3_stage0_subdone );
    sensitive << ( ap_block_pp4_stage3_subdone );
    sensitive << ( ap_block_pp4_stage2_subdone );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( regslice_both_stream_out_24_data_V_U_apdone_blk );
    sensitive << ( ap_block_pp2_stage1_subdone );
    sensitive << ( ap_block_pp2_stage2_subdone );
    sensitive << ( ap_block_pp4_stage0_subdone );
    sensitive << ( ap_block_pp4_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    mode_0_data_reg = "00000000000000000000000000000000";
    mode_0_vld_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000000000000001";
    ap_enable_reg_pp4_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp4_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp3_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pixel_unpack_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, stream_in_32_TDATA, "(port)stream_in_32_TDATA");
    sc_trace(mVcdFile, stream_in_32_TVALID, "(port)stream_in_32_TVALID");
    sc_trace(mVcdFile, stream_in_32_TREADY, "(port)stream_in_32_TREADY");
    sc_trace(mVcdFile, stream_in_32_TUSER, "(port)stream_in_32_TUSER");
    sc_trace(mVcdFile, stream_in_32_TLAST, "(port)stream_in_32_TLAST");
    sc_trace(mVcdFile, stream_out_24_TDATA, "(port)stream_out_24_TDATA");
    sc_trace(mVcdFile, stream_out_24_TVALID, "(port)stream_out_24_TVALID");
    sc_trace(mVcdFile, stream_out_24_TREADY, "(port)stream_out_24_TREADY");
    sc_trace(mVcdFile, stream_out_24_TUSER, "(port)stream_out_24_TUSER");
    sc_trace(mVcdFile, stream_out_24_TLAST, "(port)stream_out_24_TLAST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, control, "(port)control");
    sc_trace(mVcdFile, ap_rst_n_control, "(port)ap_rst_n_control");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, mode, "mode");
    sc_trace(mVcdFile, mode_0_data_reg, "mode_0_data_reg");
    sc_trace(mVcdFile, mode_0_vld_reg, "mode_0_vld_reg");
    sc_trace(mVcdFile, mode_0_ack_out, "mode_0_ack_out");
    sc_trace(mVcdFile, stream_in_32_TDATA_blk_n, "stream_in_32_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp4_stage0, "ap_CS_fsm_pp4_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp4_iter0, "ap_enable_reg_pp4_iter0");
    sc_trace(mVcdFile, ap_block_pp4_stage0, "ap_block_pp4_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_pp4_stage1, "ap_CS_fsm_pp4_stage1");
    sc_trace(mVcdFile, ap_block_pp4_stage1, "ap_block_pp4_stage1");
    sc_trace(mVcdFile, ap_CS_fsm_pp4_stage2, "ap_CS_fsm_pp4_stage2");
    sc_trace(mVcdFile, ap_block_pp4_stage2, "ap_block_pp4_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_pp3_stage0, "ap_CS_fsm_pp3_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter0, "ap_enable_reg_pp3_iter0");
    sc_trace(mVcdFile, ap_block_pp3_stage0, "ap_block_pp3_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, stream_out_24_TDATA_blk_n, "stream_out_24_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp4_stage3, "ap_CS_fsm_pp4_stage3");
    sc_trace(mVcdFile, ap_block_pp4_stage3, "ap_block_pp4_stage3");
    sc_trace(mVcdFile, ap_enable_reg_pp4_iter1, "ap_enable_reg_pp4_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp3_iter1, "ap_enable_reg_pp3_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage1, "ap_CS_fsm_pp2_stage1");
    sc_trace(mVcdFile, ap_block_pp2_stage1, "ap_block_pp2_stage1");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage2, "ap_CS_fsm_pp2_stage2");
    sc_trace(mVcdFile, ap_block_pp2_stage2, "ap_block_pp2_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage3, "ap_CS_fsm_pp2_stage3");
    sc_trace(mVcdFile, ap_block_pp2_stage3, "ap_block_pp2_stage3");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_rst_n_control_inv, "ap_rst_n_control_inv");
    sc_trace(mVcdFile, reg_183, "reg_183");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_state11_pp2_stage0_iter0, "ap_block_state11_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp2_stage0_iter1, "ap_block_state15_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, grp_fu_153_p4, "grp_fu_153_p4");
    sc_trace(mVcdFile, reg_187, "reg_187");
    sc_trace(mVcdFile, ap_block_state20_pp4_stage0_iter0, "ap_block_state20_pp4_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state24_pp4_stage0_iter1, "ap_block_state24_pp4_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp4_stage0_11001, "ap_block_pp4_stage0_11001");
    sc_trace(mVcdFile, reg_191, "reg_191");
    sc_trace(mVcdFile, reg_195, "reg_195");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter0, "ap_block_state7_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp1_stage0_iter1, "ap_block_state9_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, ap_block_state21_pp4_stage1_iter0, "ap_block_state21_pp4_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state25_pp4_stage1_iter1, "ap_block_state25_pp4_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp4_stage1_11001, "ap_block_pp4_stage1_11001");
    sc_trace(mVcdFile, grp_read_fu_98_p2, "grp_read_fu_98_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_138_p1, "grp_fu_138_p1");
    sc_trace(mVcdFile, last_2_reg_358, "last_2_reg_358");
    sc_trace(mVcdFile, p_Result_2_fu_203_p3, "p_Result_2_fu_203_p3");
    sc_trace(mVcdFile, p_Result_14_1_fu_212_p4, "p_Result_14_1_fu_212_p4");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, last_1_reg_378, "last_1_reg_378");
    sc_trace(mVcdFile, zext_ln414_4_fu_227_p1, "zext_ln414_4_fu_227_p1");
    sc_trace(mVcdFile, zext_ln414_5_fu_232_p1, "zext_ln414_5_fu_232_p1");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage1_iter0, "ap_block_state8_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, last_reg_398, "last_reg_398");
    sc_trace(mVcdFile, zext_ln414_fu_241_p1, "zext_ln414_fu_241_p1");
    sc_trace(mVcdFile, zext_ln414_1_fu_246_p1, "zext_ln414_1_fu_246_p1");
    sc_trace(mVcdFile, ap_block_state12_pp2_stage1_iter0, "ap_block_state12_pp2_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp2_stage1_11001, "ap_block_pp2_stage1_11001");
    sc_trace(mVcdFile, zext_ln414_2_fu_251_p1, "zext_ln414_2_fu_251_p1");
    sc_trace(mVcdFile, ap_block_state13_pp2_stage2_iter0, "ap_block_state13_pp2_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp2_stage2_11001, "ap_block_pp2_stage2_11001");
    sc_trace(mVcdFile, zext_ln414_3_fu_256_p1, "zext_ln414_3_fu_256_p1");
    sc_trace(mVcdFile, ap_block_state14_pp2_stage3_iter0, "ap_block_state14_pp2_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp2_stage3_11001, "ap_block_pp2_stage3_11001");
    sc_trace(mVcdFile, ap_block_state17_pp3_stage0_iter0, "ap_block_state17_pp3_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state18_pp3_stage0_iter1, "ap_block_state18_pp3_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp3_stage0_11001, "ap_block_pp3_stage0_11001");
    sc_trace(mVcdFile, trunc_ln647_3_fu_261_p1, "trunc_ln647_3_fu_261_p1");
    sc_trace(mVcdFile, empty_reg_438_1, "empty_reg_438_1");
    sc_trace(mVcdFile, empty_reg_438_2, "empty_reg_438_2");
    sc_trace(mVcdFile, trunc_ln647_fu_266_p1, "trunc_ln647_fu_266_p1");
    sc_trace(mVcdFile, trunc_ln647_reg_444, "trunc_ln647_reg_444");
    sc_trace(mVcdFile, empty_4_reg_449_1, "empty_4_reg_449_1");
    sc_trace(mVcdFile, empty_4_reg_449_2, "empty_4_reg_449_2");
    sc_trace(mVcdFile, trunc_ln647_1_fu_270_p1, "trunc_ln647_1_fu_270_p1");
    sc_trace(mVcdFile, trunc_ln647_1_reg_455, "trunc_ln647_1_reg_455");
    sc_trace(mVcdFile, or_ln718_1_fu_300_p2, "or_ln718_1_fu_300_p2");
    sc_trace(mVcdFile, ap_block_state22_pp4_stage2_iter0, "ap_block_state22_pp4_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state26_pp4_stage2_iter1, "ap_block_state26_pp4_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp4_stage2_11001, "ap_block_pp4_stage2_11001");
    sc_trace(mVcdFile, or_ln46_1_fu_313_p2, "or_ln46_1_fu_313_p2");
    sc_trace(mVcdFile, or_ln46_1_reg_465, "or_ln46_1_reg_465");
    sc_trace(mVcdFile, trunc_ln647_2_fu_319_p1, "trunc_ln647_2_fu_319_p1");
    sc_trace(mVcdFile, trunc_ln647_2_reg_470, "trunc_ln647_2_reg_470");
    sc_trace(mVcdFile, p_Result_3_3_reg_475, "p_Result_3_3_reg_475");
    sc_trace(mVcdFile, p_Result_3_1_fu_333_p3, "p_Result_3_1_fu_333_p3");
    sc_trace(mVcdFile, ap_block_state23_pp4_stage3_iter0, "ap_block_state23_pp4_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp4_stage3_11001, "ap_block_pp4_stage3_11001");
    sc_trace(mVcdFile, p_Result_3_2_fu_341_p3, "p_Result_3_2_fu_341_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp2_stage3_subdone, "ap_block_pp2_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp3_stage0_subdone, "ap_block_pp3_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp4_stage3_subdone, "ap_block_pp4_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp4_stage2_subdone, "ap_block_pp4_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage1_01001, "ap_block_pp1_stage1_01001");
    sc_trace(mVcdFile, ap_block_pp2_stage0_01001, "ap_block_pp2_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp2_stage1_01001, "ap_block_pp2_stage1_01001");
    sc_trace(mVcdFile, ap_block_pp2_stage2_01001, "ap_block_pp2_stage2_01001");
    sc_trace(mVcdFile, ap_block_pp2_stage3_01001, "ap_block_pp2_stage3_01001");
    sc_trace(mVcdFile, ap_block_pp3_stage0_01001, "ap_block_pp3_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp4_stage2_01001, "ap_block_pp4_stage2_01001");
    sc_trace(mVcdFile, ap_block_pp4_stage3_01001, "ap_block_pp4_stage3_01001");
    sc_trace(mVcdFile, ap_block_pp4_stage0_01001, "ap_block_pp4_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp4_stage1_01001, "ap_block_pp4_stage1_01001");
    sc_trace(mVcdFile, trunc_ln414_fu_199_p1, "trunc_ln414_fu_199_p1");
    sc_trace(mVcdFile, trunc_ln647_5_fu_223_p1, "trunc_ln647_5_fu_223_p1");
    sc_trace(mVcdFile, trunc_ln647_4_fu_237_p1, "trunc_ln647_4_fu_237_p1");
    sc_trace(mVcdFile, or_ln718_fu_294_p2, "or_ln718_fu_294_p2");
    sc_trace(mVcdFile, or_ln46_fu_307_p2, "or_ln46_fu_307_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, regslice_both_stream_out_24_data_V_U_apdone_blk, "regslice_both_stream_out_24_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp2_stage1_subdone, "ap_block_pp2_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp2_stage2_subdone, "ap_block_pp2_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp4_stage0_subdone, "ap_block_pp4_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp4_stage1_subdone, "ap_block_pp4_stage1_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
    sc_trace(mVcdFile, ap_idle_pp3, "ap_idle_pp3");
    sc_trace(mVcdFile, ap_enable_pp3, "ap_enable_pp3");
    sc_trace(mVcdFile, ap_idle_pp4, "ap_idle_pp4");
    sc_trace(mVcdFile, ap_enable_pp4, "ap_enable_pp4");
    sc_trace(mVcdFile, regslice_both_stream_in_32_data_V_U_apdone_blk, "regslice_both_stream_in_32_data_V_U_apdone_blk");
    sc_trace(mVcdFile, stream_in_32_TDATA_int, "stream_in_32_TDATA_int");
    sc_trace(mVcdFile, stream_in_32_TVALID_int, "stream_in_32_TVALID_int");
    sc_trace(mVcdFile, stream_in_32_TREADY_int, "stream_in_32_TREADY_int");
    sc_trace(mVcdFile, regslice_both_stream_in_32_data_V_U_ack_in, "regslice_both_stream_in_32_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_stream_in_32_user_V_U_apdone_blk, "regslice_both_stream_in_32_user_V_U_apdone_blk");
    sc_trace(mVcdFile, stream_in_32_TUSER_int, "stream_in_32_TUSER_int");
    sc_trace(mVcdFile, regslice_both_stream_in_32_user_V_U_vld_out, "regslice_both_stream_in_32_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_stream_in_32_user_V_U_ack_in, "regslice_both_stream_in_32_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_stream_in_32_last_V_U_apdone_blk, "regslice_both_stream_in_32_last_V_U_apdone_blk");
    sc_trace(mVcdFile, stream_in_32_TLAST_int, "stream_in_32_TLAST_int");
    sc_trace(mVcdFile, regslice_both_stream_in_32_last_V_U_vld_out, "regslice_both_stream_in_32_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_stream_in_32_last_V_U_ack_in, "regslice_both_stream_in_32_last_V_U_ack_in");
    sc_trace(mVcdFile, stream_out_24_TDATA_int, "stream_out_24_TDATA_int");
    sc_trace(mVcdFile, stream_out_24_TVALID_int, "stream_out_24_TVALID_int");
    sc_trace(mVcdFile, stream_out_24_TREADY_int, "stream_out_24_TREADY_int");
    sc_trace(mVcdFile, regslice_both_stream_out_24_data_V_U_vld_out, "regslice_both_stream_out_24_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_stream_out_24_user_V_U_apdone_blk, "regslice_both_stream_out_24_user_V_U_apdone_blk");
    sc_trace(mVcdFile, stream_out_24_TUSER_int, "stream_out_24_TUSER_int");
    sc_trace(mVcdFile, regslice_both_stream_out_24_user_V_U_ack_in_dummy, "regslice_both_stream_out_24_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_stream_out_24_user_V_U_vld_out, "regslice_both_stream_out_24_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_stream_out_24_last_V_U_apdone_blk, "regslice_both_stream_out_24_last_V_U_apdone_blk");
    sc_trace(mVcdFile, stream_out_24_TLAST_int, "stream_out_24_TLAST_int");
    sc_trace(mVcdFile, regslice_both_stream_out_24_last_V_U_ack_in_dummy, "regslice_both_stream_out_24_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_stream_out_24_last_V_U_vld_out, "regslice_both_stream_out_24_last_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("pixel_unpack.hdltvin.dat");
    mHdltvoutHandle.open("pixel_unpack.hdltvout.dat");
}

pixel_unpack::~pixel_unpack() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pixel_unpack_AXILiteS_s_axi_U;
    delete regslice_both_stream_in_32_data_V_U;
    delete regslice_both_stream_in_32_user_V_U;
    delete regslice_both_stream_in_32_last_V_U;
    delete regslice_both_stream_out_24_data_V_U;
    delete regslice_both_stream_out_24_user_V_U;
    delete regslice_both_stream_out_24_last_V_U;
}

void pixel_unpack::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void pixel_unpack::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(last_2_reg_358.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_4))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_4))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(last_1_reg_378.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_3, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_3, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage3_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(last_reg_398.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_2, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp2_stage3_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_2, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(grp_fu_138_p1.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_1))) {
            ap_enable_reg_pp3_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp3_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp3_iter1 = ap_enable_reg_pp3_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_1))) {
            ap_enable_reg_pp3_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp4_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp4_stage3_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(or_ln46_1_reg_465.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp4_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_0, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp4_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp4_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp4_stage3_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
              esl_seteq<1,1,1>(ap_block_pp4_stage2_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp4_iter1 = ap_enable_reg_pp4_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,32,32>(ap_const_lv32_0, grp_read_fu_98_p2.read()))) {
            ap_enable_reg_pp4_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage1_11001.read(), ap_const_boolean_0))) {
        empty_4_reg_449_1 = stream_in_32_TUSER_int.read();
        empty_4_reg_449_2 = stream_in_32_TLAST_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage0_11001.read(), ap_const_boolean_0))) {
        empty_reg_438_1 = stream_in_32_TUSER_int.read();
        empty_reg_438_2 = stream_in_32_TLAST_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        last_1_reg_378 = stream_in_32_TLAST_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        last_2_reg_358 = stream_in_32_TLAST_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        last_reg_398 = stream_in_32_TLAST_int.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mode_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, mode_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, mode_0_ack_out.read())))) {
        mode_0_data_reg = mode.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage2_11001.read(), ap_const_boolean_0))) {
        or_ln46_1_reg_465 = or_ln46_1_fu_313_p2.read();
        p_Result_3_3_reg_475 = stream_in_32_TDATA_int.read().range(31, 8);
        trunc_ln647_2_reg_470 = trunc_ln647_2_fu_319_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_183 = stream_in_32_TDATA_int.read().range(15, 8);
        reg_191 = stream_in_32_TDATA_int.read().range(23, 16);
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp4_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_187 = stream_in_32_TDATA_int.read().range(31, 24);
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp4_stage1_11001.read(), ap_const_boolean_0)))) {
        reg_195 = stream_in_32_TDATA_int.read().range(31, 16);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage1_11001.read(), ap_const_boolean_0))) {
        trunc_ln647_1_reg_455 = trunc_ln647_1_fu_270_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage0_11001.read(), ap_const_boolean_0))) {
        trunc_ln647_reg_444 = trunc_ln647_fu_266_p1.read();
    }
}

void pixel_unpack::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void pixel_unpack::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[3];
}

void pixel_unpack::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[5];
}

void pixel_unpack::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[6];
}

void pixel_unpack::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[8];
}

void pixel_unpack::thread_ap_CS_fsm_pp2_stage1() {
    ap_CS_fsm_pp2_stage1 = ap_CS_fsm.read()[9];
}

void pixel_unpack::thread_ap_CS_fsm_pp2_stage2() {
    ap_CS_fsm_pp2_stage2 = ap_CS_fsm.read()[10];
}

void pixel_unpack::thread_ap_CS_fsm_pp2_stage3() {
    ap_CS_fsm_pp2_stage3 = ap_CS_fsm.read()[11];
}

void pixel_unpack::thread_ap_CS_fsm_pp3_stage0() {
    ap_CS_fsm_pp3_stage0 = ap_CS_fsm.read()[13];
}

void pixel_unpack::thread_ap_CS_fsm_pp4_stage0() {
    ap_CS_fsm_pp4_stage0 = ap_CS_fsm.read()[15];
}

void pixel_unpack::thread_ap_CS_fsm_pp4_stage1() {
    ap_CS_fsm_pp4_stage1 = ap_CS_fsm.read()[16];
}

void pixel_unpack::thread_ap_CS_fsm_pp4_stage2() {
    ap_CS_fsm_pp4_stage2 = ap_CS_fsm.read()[17];
}

void pixel_unpack::thread_ap_CS_fsm_pp4_stage3() {
    ap_CS_fsm_pp4_stage3 = ap_CS_fsm.read()[18];
}

void pixel_unpack::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pixel_unpack::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[19];
}

void pixel_unpack::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp1_stage1_01001() {
    ap_block_pp1_stage1_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage0_01001() {
    ap_block_pp2_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp2_stage1() {
    ap_block_pp2_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage1_01001() {
    ap_block_pp2_stage1_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage1_11001() {
    ap_block_pp2_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage1_subdone() {
    ap_block_pp2_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage2() {
    ap_block_pp2_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage2_01001() {
    ap_block_pp2_stage2_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage2_11001() {
    ap_block_pp2_stage2_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage2_subdone() {
    ap_block_pp2_stage2_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage3() {
    ap_block_pp2_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage3_01001() {
    ap_block_pp2_stage3_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp2_stage3_11001() {
    ap_block_pp2_stage3_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp2_stage3_subdone() {
    ap_block_pp2_stage3_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp3_stage0() {
    ap_block_pp3_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp3_stage0_01001() {
    ap_block_pp3_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp3_stage0_11001() {
    ap_block_pp3_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp3_stage0_subdone() {
    ap_block_pp3_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp4_stage0() {
    ap_block_pp4_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp4_stage0_01001() {
    ap_block_pp4_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp4_stage0_11001() {
    ap_block_pp4_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())));
}

void pixel_unpack::thread_ap_block_pp4_stage0_subdone() {
    ap_block_pp4_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())));
}

void pixel_unpack::thread_ap_block_pp4_stage1() {
    ap_block_pp4_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp4_stage1_01001() {
    ap_block_pp4_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp4_stage1_11001() {
    ap_block_pp4_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())));
}

void pixel_unpack::thread_ap_block_pp4_stage1_subdone() {
    ap_block_pp4_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())));
}

void pixel_unpack::thread_ap_block_pp4_stage2() {
    ap_block_pp4_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp4_stage2_01001() {
    ap_block_pp4_stage2_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()));
}

void pixel_unpack::thread_ap_block_pp4_stage2_11001() {
    ap_block_pp4_stage2_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp4_stage2_subdone() {
    ap_block_pp4_stage2_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()))));
}

void pixel_unpack::thread_ap_block_pp4_stage3() {
    ap_block_pp4_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp4_stage3_01001() {
    ap_block_pp4_stage3_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_pp4_stage3_11001() {
    ap_block_pp4_stage3_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_pp4_stage3_subdone() {
    ap_block_pp4_stage3_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_24_TREADY_int.read()));
}

void pixel_unpack::thread_ap_block_state11_pp2_stage0_iter0() {
    ap_block_state11_pp2_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state12_pp2_stage1_iter0() {
    ap_block_state12_pp2_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state13_pp2_stage2_iter0() {
    ap_block_state13_pp2_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state14_pp2_stage3_iter0() {
    ap_block_state14_pp2_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state15_pp2_stage0_iter1() {
    ap_block_state15_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state17_pp3_stage0_iter0() {
    ap_block_state17_pp3_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state18_pp3_stage0_iter1() {
    ap_block_state18_pp3_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state20_pp4_stage0_iter0() {
    ap_block_state20_pp4_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state21_pp4_stage1_iter0() {
    ap_block_state21_pp4_stage1_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state22_pp4_stage2_iter0() {
    ap_block_state22_pp4_stage2_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state23_pp4_stage3_iter0() {
    ap_block_state23_pp4_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state24_pp4_stage0_iter1() {
    ap_block_state24_pp4_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state25_pp4_stage1_iter1() {
    ap_block_state25_pp4_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state26_pp4_stage2_iter1() {
    ap_block_state26_pp4_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state7_pp1_stage0_iter0() {
    ap_block_state7_pp1_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, stream_in_32_TVALID_int.read());
}

void pixel_unpack::thread_ap_block_state8_pp1_stage1_iter0() {
    ap_block_state8_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_block_state9_pp1_stage0_iter1() {
    ap_block_state9_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pixel_unpack::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void pixel_unpack::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void pixel_unpack::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void pixel_unpack::thread_ap_enable_pp3() {
    ap_enable_pp3 = (ap_idle_pp3.read() ^ ap_const_logic_1);
}

void pixel_unpack::thread_ap_enable_pp4() {
    ap_enable_pp4 = (ap_idle_pp4.read() ^ ap_const_logic_1);
}

void pixel_unpack::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void pixel_unpack::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void pixel_unpack::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void pixel_unpack::thread_ap_idle_pp3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp3_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp3_iter1.read()))) {
        ap_idle_pp3 = ap_const_logic_1;
    } else {
        ap_idle_pp3 = ap_const_logic_0;
    }
}

void pixel_unpack::thread_ap_idle_pp4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp4_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp4_iter1.read()))) {
        ap_idle_pp4 = ap_const_logic_1;
    } else {
        ap_idle_pp4 = ap_const_logic_0;
    }
}

void pixel_unpack::thread_ap_rst_n_control_inv() {
    ap_rst_n_control_inv =  (sc_logic) (~ap_rst_n_control.read());
}

void pixel_unpack::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pixel_unpack::thread_grp_fu_138_p1() {
    grp_fu_138_p1 = stream_in_32_TLAST_int.read();
}

void pixel_unpack::thread_grp_fu_153_p4() {
    grp_fu_153_p4 = stream_in_32_TDATA_int.read().range(31, 24);
}

void pixel_unpack::thread_grp_read_fu_98_p2() {
    grp_read_fu_98_p2 = mode_0_data_reg.read();
}

void pixel_unpack::thread_mode_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(regslice_both_stream_out_24_data_V_U_apdone_blk.read(), ap_const_logic_0)))) {
        mode_0_ack_out = ap_const_logic_1;
    } else {
        mode_0_ack_out = ap_const_logic_0;
    }
}

void pixel_unpack::thread_or_ln46_1_fu_313_p2() {
    or_ln46_1_fu_313_p2 = (or_ln46_fu_307_p2.read() | empty_reg_438_2.read());
}

void pixel_unpack::thread_or_ln46_fu_307_p2() {
    or_ln46_fu_307_p2 = (empty_4_reg_449_2.read() | stream_in_32_TLAST_int.read());
}

void pixel_unpack::thread_or_ln718_1_fu_300_p2() {
    or_ln718_1_fu_300_p2 = (or_ln718_fu_294_p2.read() | empty_reg_438_1.read());
}

void pixel_unpack::thread_or_ln718_fu_294_p2() {
    or_ln718_fu_294_p2 = (empty_4_reg_449_1.read() | stream_in_32_TUSER_int.read());
}

void pixel_unpack::thread_p_Result_14_1_fu_212_p4() {
    p_Result_14_1_fu_212_p4 = esl_concat<16,8>(esl_concat<8,8>(reg_187.read(), reg_183.read()), reg_191.read());
}

void pixel_unpack::thread_p_Result_2_fu_203_p3() {
    p_Result_2_fu_203_p3 = esl_concat<8,16>(grp_fu_153_p4.read(), trunc_ln414_fu_199_p1.read());
}

void pixel_unpack::thread_p_Result_3_1_fu_333_p3() {
    p_Result_3_1_fu_333_p3 = esl_concat<16,8>(trunc_ln647_1_reg_455.read(), reg_187.read());
}

void pixel_unpack::thread_p_Result_3_2_fu_341_p3() {
    p_Result_3_2_fu_341_p3 = esl_concat<8,16>(trunc_ln647_2_reg_470.read(), reg_195.read());
}

void pixel_unpack::thread_stream_in_32_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        stream_in_32_TDATA_blk_n = stream_in_32_TVALID_int.read();
    } else {
        stream_in_32_TDATA_blk_n = ap_const_logic_1;
    }
}

void pixel_unpack::thread_stream_in_32_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_32_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_stream_in_32_data_V_U_ack_in.read()))) {
        stream_in_32_TREADY = ap_const_logic_1;
    } else {
        stream_in_32_TREADY = ap_const_logic_0;
    }
}

void pixel_unpack::thread_stream_in_32_TREADY_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage2_11001.read(), ap_const_boolean_0)))) {
        stream_in_32_TREADY_int = ap_const_logic_1;
    } else {
        stream_in_32_TREADY_int = ap_const_logic_0;
    }
}

void pixel_unpack::thread_stream_out_24_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        stream_out_24_TDATA_blk_n = stream_out_24_TREADY_int.read();
    } else {
        stream_out_24_TDATA_blk_n = ap_const_logic_1;
    }
}

void pixel_unpack::thread_stream_out_24_TDATA_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp4_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = p_Result_3_3_reg_475.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp4_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = p_Result_3_2_fu_341_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp4_stage3_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = p_Result_3_1_fu_333_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp4_stage2_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = trunc_ln647_reg_444.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp3_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = trunc_ln647_3_fu_261_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage3_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_3_fu_256_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage2_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_2_fu_251_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_1_fu_246_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_fu_241_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_5_fu_232_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = zext_ln414_4_fu_227_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = p_Result_14_1_fu_212_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TDATA_int = p_Result_2_fu_203_p3.read();
    } else {
        stream_out_24_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void pixel_unpack::thread_stream_out_24_TLAST_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp4_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TLAST_int = or_ln46_1_reg_465.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp3_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TLAST_int = stream_in_32_TLAST_int.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage3_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TLAST_int = last_reg_398.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TLAST_int = last_1_reg_378.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TLAST_int = last_2_reg_358.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage1_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage2_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage2_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage3_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage0_01001.read(), ap_const_boolean_0)))) {
        stream_out_24_TLAST_int = ap_const_lv1_0;
    } else {
        stream_out_24_TLAST_int =  (sc_lv<1>) ("X");
    }
}

void pixel_unpack::thread_stream_out_24_TUSER_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp4_stage2_01001.read(), ap_const_boolean_0))) {
        stream_out_24_TUSER_int = or_ln718_1_fu_300_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage1_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage2_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage3_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage3_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp4_stage1_01001.read(), ap_const_boolean_0)))) {
        stream_out_24_TUSER_int = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp2_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp3_stage0_01001.read(), ap_const_boolean_0)))) {
        stream_out_24_TUSER_int = stream_in_32_TUSER_int.read();
    } else {
        stream_out_24_TUSER_int =  (sc_lv<1>) ("X");
    }
}

void pixel_unpack::thread_stream_out_24_TVALID() {
    stream_out_24_TVALID = regslice_both_stream_out_24_data_V_U_vld_out.read();
}

void pixel_unpack::thread_stream_out_24_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp3_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp4_stage1_11001.read(), ap_const_boolean_0)))) {
        stream_out_24_TVALID_int = ap_const_logic_1;
    } else {
        stream_out_24_TVALID_int = ap_const_logic_0;
    }
}

void pixel_unpack::thread_trunc_ln414_fu_199_p1() {
    trunc_ln414_fu_199_p1 = stream_in_32_TDATA_int.read().range(16-1, 0);
}

void pixel_unpack::thread_trunc_ln647_1_fu_270_p1() {
    trunc_ln647_1_fu_270_p1 = stream_in_32_TDATA_int.read().range(16-1, 0);
}

void pixel_unpack::thread_trunc_ln647_2_fu_319_p1() {
    trunc_ln647_2_fu_319_p1 = stream_in_32_TDATA_int.read().range(8-1, 0);
}

void pixel_unpack::thread_trunc_ln647_3_fu_261_p1() {
    trunc_ln647_3_fu_261_p1 = stream_in_32_TDATA_int.read().range(24-1, 0);
}

void pixel_unpack::thread_trunc_ln647_4_fu_237_p1() {
    trunc_ln647_4_fu_237_p1 = stream_in_32_TDATA_int.read().range(8-1, 0);
}

void pixel_unpack::thread_trunc_ln647_5_fu_223_p1() {
    trunc_ln647_5_fu_223_p1 = stream_in_32_TDATA_int.read().range(16-1, 0);
}

void pixel_unpack::thread_trunc_ln647_fu_266_p1() {
    trunc_ln647_fu_266_p1 = stream_in_32_TDATA_int.read().range(24-1, 0);
}

void pixel_unpack::thread_zext_ln414_1_fu_246_p1() {
    zext_ln414_1_fu_246_p1 = esl_zext<24,8>(reg_183.read());
}

void pixel_unpack::thread_zext_ln414_2_fu_251_p1() {
    zext_ln414_2_fu_251_p1 = esl_zext<24,8>(reg_191.read());
}

void pixel_unpack::thread_zext_ln414_3_fu_256_p1() {
    zext_ln414_3_fu_256_p1 = esl_zext<24,8>(reg_187.read());
}

void pixel_unpack::thread_zext_ln414_4_fu_227_p1() {
    zext_ln414_4_fu_227_p1 = esl_zext<24,16>(trunc_ln647_5_fu_223_p1.read());
}

void pixel_unpack::thread_zext_ln414_5_fu_232_p1() {
    zext_ln414_5_fu_232_p1 = esl_zext<24,16>(reg_195.read());
}

void pixel_unpack::thread_zext_ln414_fu_241_p1() {
    zext_ln414_fu_241_p1 = esl_zext<24,8>(trunc_ln647_4_fu_237_p1.read());
}

void pixel_unpack::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,32,32>(ap_const_lv32_0, grp_read_fu_98_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_1))) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,32,32>(ap_const_lv32_2, grp_read_fu_98_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,32,32>(ap_const_lv32_3, grp_read_fu_98_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,32,32>(grp_read_fu_98_p2.read(), ap_const_lv32_4))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_block_pp2_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            }
            break;
        case 1024 : 
            if (esl_seteq<1,1,1>(ap_block_pp2_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_block_pp2_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 8192 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp3_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp3_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp3_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp3_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp3_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 32768 : 
            if (esl_seteq<1,1,1>(ap_block_pp4_stage0_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            }
            break;
        case 65536 : 
            if (esl_seteq<1,1,1>(ap_block_pp4_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_block_pp4_stage2_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp4_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp4_stage2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp4_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp4_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp4_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            }
            break;
        case 262144 : 
            if (esl_seteq<1,1,1>(ap_block_pp4_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(regslice_both_stream_out_24_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void pixel_unpack::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_32_TDATA\" :  \"" << stream_in_32_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_32_TVALID\" :  \"" << stream_in_32_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_in_32_TREADY\" :  \"" << stream_in_32_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_32_TUSER\" :  \"" << stream_in_32_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_32_TLAST\" :  \"" << stream_in_32_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_24_TDATA\" :  \"" << stream_out_24_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_24_TVALID\" :  \"" << stream_out_24_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_24_TREADY\" :  \"" << stream_out_24_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_24_TUSER\" :  \"" << stream_out_24_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_24_TLAST\" :  \"" << stream_out_24_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n_control\" :  \"" << ap_rst_n_control.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

