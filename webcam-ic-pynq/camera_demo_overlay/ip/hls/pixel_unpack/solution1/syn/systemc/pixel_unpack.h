// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pixel_unpack_HH_
#define _pixel_unpack_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pixel_unpack_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct pixel_unpack : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > stream_in_32_TDATA;
    sc_in< sc_logic > stream_in_32_TVALID;
    sc_out< sc_logic > stream_in_32_TREADY;
    sc_in< sc_lv<1> > stream_in_32_TUSER;
    sc_in< sc_lv<1> > stream_in_32_TLAST;
    sc_out< sc_lv<24> > stream_out_24_TDATA;
    sc_out< sc_logic > stream_out_24_TVALID;
    sc_in< sc_logic > stream_out_24_TREADY;
    sc_out< sc_lv<1> > stream_out_24_TUSER;
    sc_out< sc_lv<1> > stream_out_24_TLAST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk control;
    sc_in< sc_logic > ap_rst_n_control;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    pixel_unpack(sc_module_name name);
    SC_HAS_PROCESS(pixel_unpack);

    ~pixel_unpack();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    pixel_unpack_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* pixel_unpack_AXILiteS_s_axi_U;
    regslice_both<32>* regslice_both_stream_in_32_data_V_U;
    regslice_both<1>* regslice_both_stream_in_32_user_V_U;
    regslice_both<1>* regslice_both_stream_in_32_last_V_U;
    regslice_both<24>* regslice_both_stream_out_24_data_V_U;
    regslice_both<1>* regslice_both_stream_out_24_user_V_U;
    regslice_both<1>* regslice_both_stream_out_24_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > mode;
    sc_signal< sc_lv<32> > mode_0_data_reg;
    sc_signal< sc_logic > mode_0_vld_reg;
    sc_signal< sc_logic > mode_0_ack_out;
    sc_signal< sc_logic > stream_in_32_TDATA_blk_n;
    sc_signal< sc_lv<20> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp4_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp4_iter0;
    sc_signal< bool > ap_block_pp4_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp4_stage1;
    sc_signal< bool > ap_block_pp4_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp4_stage2;
    sc_signal< bool > ap_block_pp4_stage2;
    sc_signal< sc_logic > ap_CS_fsm_pp3_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter0;
    sc_signal< bool > ap_block_pp3_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > stream_out_24_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp4_stage3;
    sc_signal< bool > ap_block_pp4_stage3;
    sc_signal< sc_logic > ap_enable_reg_pp4_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter1;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage1;
    sc_signal< bool > ap_block_pp2_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage2;
    sc_signal< bool > ap_block_pp2_stage2;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage3;
    sc_signal< bool > ap_block_pp2_stage3;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_rst_n_control_inv;
    sc_signal< sc_lv<8> > reg_183;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_state11_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state15_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<8> > grp_fu_153_p4;
    sc_signal< sc_lv<8> > reg_187;
    sc_signal< bool > ap_block_state20_pp4_stage0_iter0;
    sc_signal< bool > ap_block_state24_pp4_stage0_iter1;
    sc_signal< bool > ap_block_pp4_stage0_11001;
    sc_signal< sc_lv<8> > reg_191;
    sc_signal< sc_lv<16> > reg_195;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< bool > ap_block_state21_pp4_stage1_iter0;
    sc_signal< bool > ap_block_state25_pp4_stage1_iter1;
    sc_signal< bool > ap_block_pp4_stage1_11001;
    sc_signal< sc_lv<32> > grp_read_fu_98_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > grp_fu_138_p1;
    sc_signal< sc_lv<1> > last_2_reg_358;
    sc_signal< sc_lv<24> > p_Result_2_fu_203_p3;
    sc_signal< sc_lv<24> > p_Result_14_1_fu_212_p4;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > last_1_reg_378;
    sc_signal< sc_lv<24> > zext_ln414_4_fu_227_p1;
    sc_signal< sc_lv<24> > zext_ln414_5_fu_232_p1;
    sc_signal< bool > ap_block_state8_pp1_stage1_iter0;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<1> > last_reg_398;
    sc_signal< sc_lv<24> > zext_ln414_fu_241_p1;
    sc_signal< sc_lv<24> > zext_ln414_1_fu_246_p1;
    sc_signal< bool > ap_block_state12_pp2_stage1_iter0;
    sc_signal< bool > ap_block_pp2_stage1_11001;
    sc_signal< sc_lv<24> > zext_ln414_2_fu_251_p1;
    sc_signal< bool > ap_block_state13_pp2_stage2_iter0;
    sc_signal< bool > ap_block_pp2_stage2_11001;
    sc_signal< sc_lv<24> > zext_ln414_3_fu_256_p1;
    sc_signal< bool > ap_block_state14_pp2_stage3_iter0;
    sc_signal< bool > ap_block_pp2_stage3_11001;
    sc_signal< bool > ap_block_state17_pp3_stage0_iter0;
    sc_signal< bool > ap_block_state18_pp3_stage0_iter1;
    sc_signal< bool > ap_block_pp3_stage0_11001;
    sc_signal< sc_lv<24> > trunc_ln647_3_fu_261_p1;
    sc_signal< sc_lv<1> > empty_reg_438_1;
    sc_signal< sc_lv<1> > empty_reg_438_2;
    sc_signal< sc_lv<24> > trunc_ln647_fu_266_p1;
    sc_signal< sc_lv<24> > trunc_ln647_reg_444;
    sc_signal< sc_lv<1> > empty_4_reg_449_1;
    sc_signal< sc_lv<1> > empty_4_reg_449_2;
    sc_signal< sc_lv<16> > trunc_ln647_1_fu_270_p1;
    sc_signal< sc_lv<16> > trunc_ln647_1_reg_455;
    sc_signal< sc_lv<1> > or_ln718_1_fu_300_p2;
    sc_signal< bool > ap_block_state22_pp4_stage2_iter0;
    sc_signal< bool > ap_block_state26_pp4_stage2_iter1;
    sc_signal< bool > ap_block_pp4_stage2_11001;
    sc_signal< sc_lv<1> > or_ln46_1_fu_313_p2;
    sc_signal< sc_lv<1> > or_ln46_1_reg_465;
    sc_signal< sc_lv<8> > trunc_ln647_2_fu_319_p1;
    sc_signal< sc_lv<8> > trunc_ln647_2_reg_470;
    sc_signal< sc_lv<24> > p_Result_3_3_reg_475;
    sc_signal< sc_lv<24> > p_Result_3_1_fu_333_p3;
    sc_signal< bool > ap_block_state23_pp4_stage3_iter0;
    sc_signal< bool > ap_block_pp4_stage3_11001;
    sc_signal< sc_lv<24> > p_Result_3_2_fu_341_p3;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< bool > ap_block_pp2_stage3_subdone;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< bool > ap_block_pp3_stage0_subdone;
    sc_signal< bool > ap_block_pp4_stage3_subdone;
    sc_signal< bool > ap_block_pp4_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< bool > ap_block_pp1_stage1_01001;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< bool > ap_block_pp2_stage1_01001;
    sc_signal< bool > ap_block_pp2_stage2_01001;
    sc_signal< bool > ap_block_pp2_stage3_01001;
    sc_signal< bool > ap_block_pp3_stage0_01001;
    sc_signal< bool > ap_block_pp4_stage2_01001;
    sc_signal< bool > ap_block_pp4_stage3_01001;
    sc_signal< bool > ap_block_pp4_stage0_01001;
    sc_signal< bool > ap_block_pp4_stage1_01001;
    sc_signal< sc_lv<16> > trunc_ln414_fu_199_p1;
    sc_signal< sc_lv<16> > trunc_ln647_5_fu_223_p1;
    sc_signal< sc_lv<8> > trunc_ln647_4_fu_237_p1;
    sc_signal< sc_lv<1> > or_ln718_fu_294_p2;
    sc_signal< sc_lv<1> > or_ln46_fu_307_p2;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_logic > regslice_both_stream_out_24_data_V_U_apdone_blk;
    sc_signal< sc_lv<20> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp2_stage1_subdone;
    sc_signal< bool > ap_block_pp2_stage2_subdone;
    sc_signal< bool > ap_block_pp4_stage0_subdone;
    sc_signal< bool > ap_block_pp4_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > ap_idle_pp3;
    sc_signal< sc_logic > ap_enable_pp3;
    sc_signal< sc_logic > ap_idle_pp4;
    sc_signal< sc_logic > ap_enable_pp4;
    sc_signal< sc_logic > regslice_both_stream_in_32_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > stream_in_32_TDATA_int;
    sc_signal< sc_logic > stream_in_32_TVALID_int;
    sc_signal< sc_logic > stream_in_32_TREADY_int;
    sc_signal< sc_logic > regslice_both_stream_in_32_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_stream_in_32_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > stream_in_32_TUSER_int;
    sc_signal< sc_logic > regslice_both_stream_in_32_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_stream_in_32_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_stream_in_32_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > stream_in_32_TLAST_int;
    sc_signal< sc_logic > regslice_both_stream_in_32_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_stream_in_32_last_V_U_ack_in;
    sc_signal< sc_lv<24> > stream_out_24_TDATA_int;
    sc_signal< sc_logic > stream_out_24_TVALID_int;
    sc_signal< sc_logic > stream_out_24_TREADY_int;
    sc_signal< sc_logic > regslice_both_stream_out_24_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_stream_out_24_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > stream_out_24_TUSER_int;
    sc_signal< sc_logic > regslice_both_stream_out_24_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_stream_out_24_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_stream_out_24_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > stream_out_24_TLAST_int;
    sc_signal< sc_logic > regslice_both_stream_out_24_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_stream_out_24_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<20> ap_ST_fsm_state1;
    static const sc_lv<20> ap_ST_fsm_state2;
    static const sc_lv<20> ap_ST_fsm_pp0_stage0;
    static const sc_lv<20> ap_ST_fsm_pp0_stage1;
    static const sc_lv<20> ap_ST_fsm_state6;
    static const sc_lv<20> ap_ST_fsm_pp1_stage0;
    static const sc_lv<20> ap_ST_fsm_pp1_stage1;
    static const sc_lv<20> ap_ST_fsm_state10;
    static const sc_lv<20> ap_ST_fsm_pp2_stage0;
    static const sc_lv<20> ap_ST_fsm_pp2_stage1;
    static const sc_lv<20> ap_ST_fsm_pp2_stage2;
    static const sc_lv<20> ap_ST_fsm_pp2_stage3;
    static const sc_lv<20> ap_ST_fsm_state16;
    static const sc_lv<20> ap_ST_fsm_pp3_stage0;
    static const sc_lv<20> ap_ST_fsm_state19;
    static const sc_lv<20> ap_ST_fsm_pp4_stage0;
    static const sc_lv<20> ap_ST_fsm_pp4_stage1;
    static const sc_lv<20> ap_ST_fsm_pp4_stage2;
    static const sc_lv<20> ap_ST_fsm_pp4_stage3;
    static const sc_lv<20> ap_ST_fsm_state27;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_13;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_pp2_stage1();
    void thread_ap_CS_fsm_pp2_stage2();
    void thread_ap_CS_fsm_pp2_stage3();
    void thread_ap_CS_fsm_pp3_stage0();
    void thread_ap_CS_fsm_pp4_stage0();
    void thread_ap_CS_fsm_pp4_stage1();
    void thread_ap_CS_fsm_pp4_stage2();
    void thread_ap_CS_fsm_pp4_stage3();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state27();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_01001();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_pp2_stage1();
    void thread_ap_block_pp2_stage1_01001();
    void thread_ap_block_pp2_stage1_11001();
    void thread_ap_block_pp2_stage1_subdone();
    void thread_ap_block_pp2_stage2();
    void thread_ap_block_pp2_stage2_01001();
    void thread_ap_block_pp2_stage2_11001();
    void thread_ap_block_pp2_stage2_subdone();
    void thread_ap_block_pp2_stage3();
    void thread_ap_block_pp2_stage3_01001();
    void thread_ap_block_pp2_stage3_11001();
    void thread_ap_block_pp2_stage3_subdone();
    void thread_ap_block_pp3_stage0();
    void thread_ap_block_pp3_stage0_01001();
    void thread_ap_block_pp3_stage0_11001();
    void thread_ap_block_pp3_stage0_subdone();
    void thread_ap_block_pp4_stage0();
    void thread_ap_block_pp4_stage0_01001();
    void thread_ap_block_pp4_stage0_11001();
    void thread_ap_block_pp4_stage0_subdone();
    void thread_ap_block_pp4_stage1();
    void thread_ap_block_pp4_stage1_01001();
    void thread_ap_block_pp4_stage1_11001();
    void thread_ap_block_pp4_stage1_subdone();
    void thread_ap_block_pp4_stage2();
    void thread_ap_block_pp4_stage2_01001();
    void thread_ap_block_pp4_stage2_11001();
    void thread_ap_block_pp4_stage2_subdone();
    void thread_ap_block_pp4_stage3();
    void thread_ap_block_pp4_stage3_01001();
    void thread_ap_block_pp4_stage3_11001();
    void thread_ap_block_pp4_stage3_subdone();
    void thread_ap_block_state11_pp2_stage0_iter0();
    void thread_ap_block_state12_pp2_stage1_iter0();
    void thread_ap_block_state13_pp2_stage2_iter0();
    void thread_ap_block_state14_pp2_stage3_iter0();
    void thread_ap_block_state15_pp2_stage0_iter1();
    void thread_ap_block_state17_pp3_stage0_iter0();
    void thread_ap_block_state18_pp3_stage0_iter1();
    void thread_ap_block_state20_pp4_stage0_iter0();
    void thread_ap_block_state21_pp4_stage1_iter0();
    void thread_ap_block_state22_pp4_stage2_iter0();
    void thread_ap_block_state23_pp4_stage3_iter0();
    void thread_ap_block_state24_pp4_stage0_iter1();
    void thread_ap_block_state25_pp4_stage1_iter1();
    void thread_ap_block_state26_pp4_stage2_iter1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage1_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_enable_pp3();
    void thread_ap_enable_pp4();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_idle_pp3();
    void thread_ap_idle_pp4();
    void thread_ap_rst_n_control_inv();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_138_p1();
    void thread_grp_fu_153_p4();
    void thread_grp_read_fu_98_p2();
    void thread_mode_0_ack_out();
    void thread_or_ln46_1_fu_313_p2();
    void thread_or_ln46_fu_307_p2();
    void thread_or_ln718_1_fu_300_p2();
    void thread_or_ln718_fu_294_p2();
    void thread_p_Result_14_1_fu_212_p4();
    void thread_p_Result_2_fu_203_p3();
    void thread_p_Result_3_1_fu_333_p3();
    void thread_p_Result_3_2_fu_341_p3();
    void thread_stream_in_32_TDATA_blk_n();
    void thread_stream_in_32_TREADY();
    void thread_stream_in_32_TREADY_int();
    void thread_stream_out_24_TDATA_blk_n();
    void thread_stream_out_24_TDATA_int();
    void thread_stream_out_24_TLAST_int();
    void thread_stream_out_24_TUSER_int();
    void thread_stream_out_24_TVALID();
    void thread_stream_out_24_TVALID_int();
    void thread_trunc_ln414_fu_199_p1();
    void thread_trunc_ln647_1_fu_270_p1();
    void thread_trunc_ln647_2_fu_319_p1();
    void thread_trunc_ln647_3_fu_261_p1();
    void thread_trunc_ln647_4_fu_237_p1();
    void thread_trunc_ln647_5_fu_223_p1();
    void thread_trunc_ln647_fu_266_p1();
    void thread_zext_ln414_1_fu_246_p1();
    void thread_zext_ln414_2_fu_251_p1();
    void thread_zext_ln414_3_fu_256_p1();
    void thread_zext_ln414_4_fu_227_p1();
    void thread_zext_ln414_5_fu_232_p1();
    void thread_zext_ln414_fu_241_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
