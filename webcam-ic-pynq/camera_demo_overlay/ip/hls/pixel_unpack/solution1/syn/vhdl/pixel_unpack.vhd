-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pixel_unpack is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_32_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_32_TVALID : IN STD_LOGIC;
    stream_in_32_TREADY : OUT STD_LOGIC;
    stream_in_32_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_32_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_24_TVALID : OUT STD_LOGIC;
    stream_out_24_TREADY : IN STD_LOGIC;
    stream_out_24_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    control : IN STD_LOGIC;
    ap_rst_n_control : IN STD_LOGIC );
end;


architecture behav of pixel_unpack is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pixel_unpack,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.302000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=434,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal mode : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mode_0_vld_reg : STD_LOGIC := '0';
    signal mode_0_ack_out : STD_LOGIC;
    signal stream_in_32_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_block_pp4_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_24_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_block_pp4_stage3 : BOOLEAN;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_rst_n_control_inv : STD_LOGIC;
    signal reg_183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal grp_fu_153_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state20_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_block_state21_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state25_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal grp_read_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_2_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_203_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_14_1_fu_212_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal last_1_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_4_fu_227_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_5_fu_232_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal last_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_fu_241_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_1_fu_246_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state12_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal zext_ln414_2_fu_251_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state13_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal zext_ln414_3_fu_256_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state14_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal trunc_ln647_3_fu_261_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_reg_438_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_438_2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_266_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln647_reg_444 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_4_reg_449_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_4_reg_449_2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_1_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_1_reg_455 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln718_1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp4_stage2_iter0 : BOOLEAN;
    signal ap_block_state26_pp4_stage2_iter1 : BOOLEAN;
    signal ap_block_pp4_stage2_11001 : BOOLEAN;
    signal or_ln46_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_2_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_2_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_3_reg_475 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_3_1_fu_333_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state23_pp4_stage3_iter0 : BOOLEAN;
    signal ap_block_pp4_stage3_11001 : BOOLEAN;
    signal p_Result_3_2_fu_341_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_block_pp4_stage3_subdone : BOOLEAN;
    signal ap_block_pp4_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage1_01001 : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_block_pp2_stage1_01001 : BOOLEAN;
    signal ap_block_pp2_stage2_01001 : BOOLEAN;
    signal ap_block_pp2_stage3_01001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage2_01001 : BOOLEAN;
    signal ap_block_pp4_stage3_01001 : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage1_01001 : BOOLEAN;
    signal trunc_ln414_fu_199_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_5_fu_223_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_4_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln718_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal regslice_both_stream_out_24_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal regslice_both_stream_in_32_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_32_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_32_TVALID_int : STD_LOGIC;
    signal stream_in_32_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_in_32_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_32_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_32_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_32_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_32_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_32_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_32_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_32_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_32_last_V_U_ack_in : STD_LOGIC;
    signal stream_out_24_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_TVALID_int : STD_LOGIC;
    signal stream_out_24_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_out_24_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_out_24_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_out_24_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_out_24_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_out_24_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_last_V_U_vld_out : STD_LOGIC;

    component pixel_unpack_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mode : OUT STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    pixel_unpack_AXILiteS_s_axi_U : component pixel_unpack_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => control,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mode => mode,
        clk => ap_clk,
        rst => ap_rst_n_control_inv);

    regslice_both_stream_in_32_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_32_TDATA,
        vld_in => stream_in_32_TVALID,
        ack_in => regslice_both_stream_in_32_data_V_U_ack_in,
        data_out => stream_in_32_TDATA_int,
        vld_out => stream_in_32_TVALID_int,
        ack_out => stream_in_32_TREADY_int,
        apdone_blk => regslice_both_stream_in_32_data_V_U_apdone_blk);

    regslice_both_stream_in_32_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_32_TUSER,
        vld_in => stream_in_32_TVALID,
        ack_in => regslice_both_stream_in_32_user_V_U_ack_in,
        data_out => stream_in_32_TUSER_int,
        vld_out => regslice_both_stream_in_32_user_V_U_vld_out,
        ack_out => stream_in_32_TREADY_int,
        apdone_blk => regslice_both_stream_in_32_user_V_U_apdone_blk);

    regslice_both_stream_in_32_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_32_TLAST,
        vld_in => stream_in_32_TVALID,
        ack_in => regslice_both_stream_in_32_last_V_U_ack_in,
        data_out => stream_in_32_TLAST_int,
        vld_out => regslice_both_stream_in_32_last_V_U_vld_out,
        ack_out => stream_in_32_TREADY_int,
        apdone_blk => regslice_both_stream_in_32_last_V_U_apdone_blk);

    regslice_both_stream_out_24_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_24_TDATA_int,
        vld_in => stream_out_24_TVALID_int,
        ack_in => stream_out_24_TREADY_int,
        data_out => stream_out_24_TDATA,
        vld_out => regslice_both_stream_out_24_data_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_data_V_U_apdone_blk);

    regslice_both_stream_out_24_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_24_TUSER_int,
        vld_in => stream_out_24_TVALID_int,
        ack_in => regslice_both_stream_out_24_user_V_U_ack_in_dummy,
        data_out => stream_out_24_TUSER,
        vld_out => regslice_both_stream_out_24_user_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_user_V_U_apdone_blk);

    regslice_both_stream_out_24_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_24_TLAST_int,
        vld_in => stream_out_24_TVALID_int,
        ack_in => regslice_both_stream_out_24_last_V_U_ack_in_dummy,
        data_out => stream_out_24_TLAST,
        vld_out => regslice_both_stream_out_24_last_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (last_2_reg_358 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (last_1_reg_378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (last_reg_398 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_98_p2 = ap_const_lv32_2))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_98_p2 = ap_const_lv32_2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (grp_fu_138_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage3_subdone) and (or_ln46_1_reg_465 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp4_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    mode_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                empty_4_reg_449_1 <= stream_in_32_TUSER_int;
                empty_4_reg_449_2 <= stream_in_32_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                empty_reg_438_1 <= stream_in_32_TUSER_int;
                empty_reg_438_2 <= stream_in_32_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                last_1_reg_378 <= stream_in_32_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                last_2_reg_358 <= stream_in_32_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                last_reg_398 <= stream_in_32_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((mode_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((mode_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (mode_0_vld_reg = ap_const_logic_1)))) then
                mode_0_data_reg <= mode;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then
                or_ln46_1_reg_465 <= or_ln46_1_fu_313_p2;
                p_Result_3_3_reg_475 <= stream_in_32_TDATA_int(31 downto 8);
                trunc_ln647_2_reg_470 <= trunc_ln647_2_fu_319_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                reg_183 <= stream_in_32_TDATA_int(15 downto 8);
                reg_191 <= stream_in_32_TDATA_int(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                reg_187 <= stream_in_32_TDATA_int(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                reg_195 <= stream_in_32_TDATA_int(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                trunc_ln647_1_reg_455 <= trunc_ln647_1_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                trunc_ln647_reg_444 <= trunc_ln647_fu_266_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter1, grp_read_fu_98_p2, ap_CS_fsm_state2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage3_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage3_subdone, ap_block_pp4_stage2_subdone, ap_CS_fsm_state27, regslice_both_stream_out_24_data_V_U_apdone_blk, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp4_stage0_subdone, ap_block_pp4_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((grp_read_fu_98_p2 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_98_p2 = ap_const_lv32_2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((grp_read_fu_98_p2 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_pp4_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if ((not(((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp4_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                end if;
            when ap_ST_fsm_state27 => 
                if (((regslice_both_stream_out_24_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(16);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(17);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state27 <= ap_CS_fsm(19);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp0_stage1_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp0_stage1_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp1_stage0_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp1_stage0_11001 <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp1_stage0_subdone <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp1_stage1_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp1_stage1_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ap_enable_reg_pp2_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp2_stage0_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage0_11001 <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage0_subdone <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;

        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage1_11001_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage1_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage1_subdone_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage1_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage2_11001_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage2_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage2_subdone_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage2_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage3_11001_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage3_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage3_subdone_assign_proc : process(ap_enable_reg_pp2_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp2_stage3_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(ap_enable_reg_pp3_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp3_stage0_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp3_stage0_11001 <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp3_stage0_subdone <= (((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_01001_assign_proc : process(ap_enable_reg_pp4_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp4_stage0_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage0_11001 <= (((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage0_subdone <= (((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage1_01001_assign_proc : process(ap_enable_reg_pp4_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp4_stage1_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage1_11001_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage1_11001 <= (((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage1_subdone_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage1_subdone <= (((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage2_01001_assign_proc : process(ap_enable_reg_pp4_iter0, stream_in_32_TVALID_int)
    begin
                ap_block_pp4_stage2_01001 <= ((stream_in_32_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage2_11001_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage2_11001 <= (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage2_subdone_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, stream_in_32_TVALID_int, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage2_subdone <= (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and ((stream_out_24_TREADY_int = ap_const_logic_0) or (stream_in_32_TVALID_int = ap_const_logic_0))) or ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage3_11001_assign_proc : process(ap_enable_reg_pp4_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage3_11001 <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage3_subdone_assign_proc : process(ap_enable_reg_pp4_iter0, stream_out_24_TREADY_int)
    begin
                ap_block_pp4_stage3_subdone <= ((stream_out_24_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1));
    end process;


    ap_block_state11_pp2_stage0_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state11_pp2_stage0_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state12_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp3_stage0_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state17_pp3_stage0_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state18_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp4_stage0_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state20_pp4_stage0_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;


    ap_block_state21_pp4_stage1_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state21_pp4_stage1_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;


    ap_block_state22_pp4_stage2_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state22_pp4_stage2_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state23_pp4_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp4_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state3_pp0_stage0_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage0_iter0_assign_proc : process(stream_in_32_TVALID_int)
    begin
                ap_block_state7_pp1_stage0_iter0 <= (stream_in_32_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_control_inv_assign_proc : process(ap_rst_n_control)
    begin
                ap_rst_n_control_inv <= not(ap_rst_n_control);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_138_p1 <= stream_in_32_TLAST_int;
    grp_fu_153_p4 <= stream_in_32_TDATA_int(31 downto 24);
    grp_read_fu_98_p2 <= mode_0_data_reg;

    mode_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state27, regslice_both_stream_out_24_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((regslice_both_stream_out_24_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            mode_0_ack_out <= ap_const_logic_1;
        else 
            mode_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    or_ln46_1_fu_313_p2 <= (or_ln46_fu_307_p2 or empty_reg_438_2);
    or_ln46_fu_307_p2 <= (stream_in_32_TLAST_int or empty_4_reg_449_2);
    or_ln718_1_fu_300_p2 <= (or_ln718_fu_294_p2 or empty_reg_438_1);
    or_ln718_fu_294_p2 <= (stream_in_32_TUSER_int or empty_4_reg_449_1);
    p_Result_14_1_fu_212_p4 <= ((reg_187 & reg_183) & reg_191);
    p_Result_2_fu_203_p3 <= (grp_fu_153_p4 & trunc_ln414_fu_199_p1);
    p_Result_3_1_fu_333_p3 <= (trunc_ln647_1_reg_455 & reg_187);
    p_Result_3_2_fu_341_p3 <= (trunc_ln647_2_reg_470 & reg_195);

    stream_in_32_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, stream_in_32_TVALID_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            stream_in_32_TDATA_blk_n <= stream_in_32_TVALID_int;
        else 
            stream_in_32_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_32_TREADY_assign_proc : process(stream_in_32_TVALID, regslice_both_stream_in_32_data_V_U_ack_in)
    begin
        if (((regslice_both_stream_in_32_data_V_U_ack_in = ap_const_logic_1) and (stream_in_32_TVALID = ap_const_logic_1))) then 
            stream_in_32_TREADY <= ap_const_logic_1;
        else 
            stream_in_32_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_32_TREADY_int_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            stream_in_32_TREADY_int <= ap_const_logic_1;
        else 
            stream_in_32_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_24_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, stream_out_24_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            stream_out_24_TDATA_blk_n <= stream_out_24_TREADY_int;
        else 
            stream_out_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_out_24_TDATA_int_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage1, p_Result_2_fu_203_p3, p_Result_14_1_fu_212_p4, zext_ln414_4_fu_227_p1, zext_ln414_5_fu_232_p1, zext_ln414_fu_241_p1, zext_ln414_1_fu_246_p1, zext_ln414_2_fu_251_p1, zext_ln414_3_fu_256_p1, trunc_ln647_3_fu_261_p1, trunc_ln647_reg_444, p_Result_3_3_reg_475, p_Result_3_1_fu_333_p3, p_Result_3_2_fu_341_p3, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp1_stage0_01001, ap_block_pp1_stage1_01001, ap_block_pp2_stage0_01001, ap_block_pp2_stage1_01001, ap_block_pp2_stage2_01001, ap_block_pp2_stage3_01001, ap_block_pp3_stage0_01001, ap_block_pp4_stage2_01001, ap_block_pp4_stage3_01001, ap_block_pp4_stage0_01001, ap_block_pp4_stage1_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= p_Result_3_3_reg_475;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= p_Result_3_2_fu_341_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3_01001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            stream_out_24_TDATA_int <= p_Result_3_1_fu_333_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= trunc_ln647_reg_444;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            stream_out_24_TDATA_int <= trunc_ln647_3_fu_261_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= zext_ln414_3_fu_256_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= zext_ln414_2_fu_251_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= zext_ln414_1_fu_246_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_01001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            stream_out_24_TDATA_int <= zext_ln414_fu_241_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= zext_ln414_5_fu_232_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_out_24_TDATA_int <= zext_ln414_4_fu_227_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            stream_out_24_TDATA_int <= p_Result_14_1_fu_212_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_out_24_TDATA_int <= p_Result_2_fu_203_p3;
        else 
            stream_out_24_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stream_out_24_TLAST_int_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage1, last_2_reg_358, last_1_reg_378, last_reg_398, or_ln46_1_reg_465, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp1_stage0_01001, ap_block_pp1_stage1_01001, ap_block_pp2_stage0_01001, ap_block_pp2_stage1_01001, ap_block_pp2_stage2_01001, ap_block_pp2_stage3_01001, ap_block_pp3_stage0_01001, ap_block_pp4_stage2_01001, ap_block_pp4_stage3_01001, ap_block_pp4_stage0_01001, ap_block_pp4_stage1_01001, stream_in_32_TLAST_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            stream_out_24_TLAST_int <= or_ln46_1_reg_465;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            stream_out_24_TLAST_int <= stream_in_32_TLAST_int;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            stream_out_24_TLAST_int <= last_reg_398;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stream_out_24_TLAST_int <= last_1_reg_378;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            stream_out_24_TLAST_int <= last_2_reg_358;
        elsif ((((ap_const_boolean_0 = ap_block_pp4_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_01001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_01001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            stream_out_24_TLAST_int <= ap_const_lv1_0;
        else 
            stream_out_24_TLAST_int <= "X";
        end if; 
    end process;


    stream_out_24_TUSER_int_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage1, or_ln718_1_fu_300_p2, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp1_stage0_01001, ap_block_pp1_stage1_01001, ap_block_pp2_stage0_01001, ap_block_pp2_stage1_01001, ap_block_pp2_stage2_01001, ap_block_pp2_stage3_01001, ap_block_pp3_stage0_01001, ap_block_pp4_stage2_01001, ap_block_pp4_stage3_01001, ap_block_pp4_stage0_01001, ap_block_pp4_stage1_01001, stream_in_32_TUSER_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            stream_out_24_TUSER_int <= or_ln718_1_fu_300_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp4_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_01001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            stream_out_24_TUSER_int <= ap_const_lv1_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_01001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            stream_out_24_TUSER_int <= stream_in_32_TUSER_int;
        else 
            stream_out_24_TUSER_int <= "X";
        end if; 
    end process;

    stream_out_24_TVALID <= regslice_both_stream_out_24_data_V_U_vld_out;

    stream_out_24_TVALID_int_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp0_stage1_11001, ap_block_pp1_stage1_11001, ap_block_pp2_stage1_11001, ap_block_pp2_stage2_11001, ap_block_pp2_stage3_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage2_11001, ap_block_pp4_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            stream_out_24_TVALID_int <= ap_const_logic_1;
        else 
            stream_out_24_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln414_fu_199_p1 <= stream_in_32_TDATA_int(16 - 1 downto 0);
    trunc_ln647_1_fu_270_p1 <= stream_in_32_TDATA_int(16 - 1 downto 0);
    trunc_ln647_2_fu_319_p1 <= stream_in_32_TDATA_int(8 - 1 downto 0);
    trunc_ln647_3_fu_261_p1 <= stream_in_32_TDATA_int(24 - 1 downto 0);
    trunc_ln647_4_fu_237_p1 <= stream_in_32_TDATA_int(8 - 1 downto 0);
    trunc_ln647_5_fu_223_p1 <= stream_in_32_TDATA_int(16 - 1 downto 0);
    trunc_ln647_fu_266_p1 <= stream_in_32_TDATA_int(24 - 1 downto 0);
    zext_ln414_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_183),24));
    zext_ln414_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_191),24));
    zext_ln414_3_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_187),24));
    zext_ln414_4_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_5_fu_223_p1),24));
    zext_ln414_5_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_195),24));
    zext_ln414_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_4_fu_237_p1),24));
end behav;
