-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trace_cntrl_64 is
generic (
    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_TRACE_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    trace_64_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    trace_64_TVALID : IN STD_LOGIC;
    trace_64_TREADY : OUT STD_LOGIC;
    trace_64_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    trace_64_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    trace_64_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    capture_64_TVALID : OUT STD_LOGIC;
    capture_64_TREADY : IN STD_LOGIC;
    capture_64_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    capture_64_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    capture_64_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_trace_cntrl_AWVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_AWREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_WREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_trace_cntrl_ARVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_ARREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_RREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_trace_cntrl_BVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_BREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of trace_cntrl_64 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trace_cntrl_64,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.873000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=399,HLS_SYN_LUT=602,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal trigger_V : STD_LOGIC_VECTOR (63 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal trace_64_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln20_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln20_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln20_reg_286_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal match_0_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_read_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln555_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln555_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op60_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op63_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trace_temp_data_V_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_temp_keep_V_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_temp_strb_V_reg_300 : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_temp_user_V_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_id_V_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_dest_V_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_last_V_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_last_V_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_match_0_phi_fu_139_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_1_phi_fu_160_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_i_1_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln555_1_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_capture_64_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_trace_64_data_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_64_TVALID_int : STD_LOGIC;
    signal trace_64_TREADY_int : STD_LOGIC;
    signal regslice_both_trace_64_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_keep_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_trace_64_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_strb_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_trace_64_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_user_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_trace_64_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_last_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_trace_64_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_id_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_trace_64_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_trace_64_dest_V_U_apdone_blk : STD_LOGIC;
    signal trace_64_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_trace_64_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_trace_64_dest_V_U_ack_in : STD_LOGIC;
    signal capture_64_TVALID_int : STD_LOGIC;
    signal capture_64_TREADY_int : STD_LOGIC;
    signal regslice_both_capture_64_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_capture_64_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_capture_64_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_capture_64_dest_V_U_vld_out : STD_LOGIC;

    component trace_cntrl_64_trace_cntrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        trigger_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    trace_cntrl_64_trace_cntrl_s_axi_U : component trace_cntrl_64_trace_cntrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TRACE_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TRACE_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_trace_cntrl_AWVALID,
        AWREADY => s_axi_trace_cntrl_AWREADY,
        AWADDR => s_axi_trace_cntrl_AWADDR,
        WVALID => s_axi_trace_cntrl_WVALID,
        WREADY => s_axi_trace_cntrl_WREADY,
        WDATA => s_axi_trace_cntrl_WDATA,
        WSTRB => s_axi_trace_cntrl_WSTRB,
        ARVALID => s_axi_trace_cntrl_ARVALID,
        ARREADY => s_axi_trace_cntrl_ARREADY,
        ARADDR => s_axi_trace_cntrl_ARADDR,
        RVALID => s_axi_trace_cntrl_RVALID,
        RREADY => s_axi_trace_cntrl_RREADY,
        RDATA => s_axi_trace_cntrl_RDATA,
        RRESP => s_axi_trace_cntrl_RRESP,
        BVALID => s_axi_trace_cntrl_BVALID,
        BREADY => s_axi_trace_cntrl_BREADY,
        BRESP => s_axi_trace_cntrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        trigger_V => trigger_V,
        length_r => length_r);

    regslice_both_trace_64_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TDATA,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_data_V_U_ack_in,
        data_out => trace_64_TDATA_int,
        vld_out => trace_64_TVALID_int,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_data_V_U_apdone_blk);

    regslice_both_trace_64_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TKEEP,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_keep_V_U_ack_in,
        data_out => trace_64_TKEEP_int,
        vld_out => regslice_both_trace_64_keep_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_keep_V_U_apdone_blk);

    regslice_both_trace_64_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TSTRB,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_strb_V_U_ack_in,
        data_out => trace_64_TSTRB_int,
        vld_out => regslice_both_trace_64_strb_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_strb_V_U_apdone_blk);

    regslice_both_trace_64_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TUSER,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_user_V_U_ack_in,
        data_out => trace_64_TUSER_int,
        vld_out => regslice_both_trace_64_user_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_user_V_U_apdone_blk);

    regslice_both_trace_64_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TLAST,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_last_V_U_ack_in,
        data_out => trace_64_TLAST_int,
        vld_out => regslice_both_trace_64_last_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_last_V_U_apdone_blk);

    regslice_both_trace_64_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TID,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_id_V_U_ack_in,
        data_out => trace_64_TID_int,
        vld_out => regslice_both_trace_64_id_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_id_V_U_apdone_blk);

    regslice_both_trace_64_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_64_TDEST,
        vld_in => trace_64_TVALID,
        ack_in => regslice_both_trace_64_dest_V_U_ack_in,
        data_out => trace_64_TDEST_int,
        vld_out => regslice_both_trace_64_dest_V_U_vld_out,
        ack_out => trace_64_TREADY_int,
        apdone_blk => regslice_both_trace_64_dest_V_U_apdone_blk);

    regslice_both_capture_64_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_data_V_reg_290,
        vld_in => capture_64_TVALID_int,
        ack_in => capture_64_TREADY_int,
        data_out => capture_64_TDATA,
        vld_out => regslice_both_capture_64_data_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_data_V_U_apdone_blk);

    regslice_both_capture_64_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_keep_V_reg_295,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_keep_V_U_ack_in_dummy,
        data_out => capture_64_TKEEP,
        vld_out => regslice_both_capture_64_keep_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_keep_V_U_apdone_blk);

    regslice_both_capture_64_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_strb_V_reg_300,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_strb_V_U_ack_in_dummy,
        data_out => capture_64_TSTRB,
        vld_out => regslice_both_capture_64_strb_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_strb_V_U_apdone_blk);

    regslice_both_capture_64_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_user_V_reg_305,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_user_V_U_ack_in_dummy,
        data_out => capture_64_TUSER,
        vld_out => regslice_both_capture_64_user_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_user_V_U_apdone_blk);

    regslice_both_capture_64_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_last_V_reg_325,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_last_V_U_ack_in_dummy,
        data_out => capture_64_TLAST,
        vld_out => regslice_both_capture_64_last_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_last_V_U_apdone_blk);

    regslice_both_capture_64_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_id_V_reg_310,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_id_V_U_ack_in_dummy,
        data_out => capture_64_TID,
        vld_out => regslice_both_capture_64_id_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_id_V_U_apdone_blk);

    regslice_both_capture_64_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => trace_temp_dest_V_reg_315,
        vld_in => capture_64_TVALID_int,
        ack_in => regslice_both_capture_64_dest_V_U_ack_in_dummy,
        data_out => capture_64_TDEST,
        vld_out => regslice_both_capture_64_dest_V_U_vld_out,
        ack_out => capture_64_TREADY,
        apdone_blk => regslice_both_capture_64_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_146 <= i_2_fu_257_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_146 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    match_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_286 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                match_0_reg_135 <= or_ln23_reg_320;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                match_0_reg_135 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    samples_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln23_fu_225_p2 = ap_const_lv1_1) and (icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                samples_1_fu_76 <= samples_fu_246_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                samples_1_fu_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln27_reg_275 <= add_ln27_fu_167_p2;
                length_read_reg_270 <= length_r;
                trunc_ln555_reg_280 <= trunc_ln555_fu_173_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_286 <= icmp_ln20_fu_182_p2;
                icmp_ln20_reg_286_pp0_iter1_reg <= icmp_ln20_reg_286;
                or_ln23_reg_320_pp0_iter1_reg <= or_ln23_reg_320;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln23_reg_320 <= or_ln23_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trace_temp_data_V_reg_290 <= trace_64_TDATA_int;
                trace_temp_dest_V_reg_315 <= trace_64_TDEST_int;
                trace_temp_id_V_reg_310 <= trace_64_TID_int;
                trace_temp_keep_V_reg_295 <= trace_64_TKEEP_int;
                trace_temp_strb_V_reg_300 <= trace_64_TSTRB_int;
                trace_temp_user_V_reg_305 <= trace_64_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln23_fu_225_p2 = ap_const_lv1_1) and (icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trace_temp_last_V_reg_325 <= trace_temp_last_V_fu_241_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln20_fu_182_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_capture_64_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_capture_64_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln27_fu_167_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(length_r));
    and_ln23_fu_215_p2 <= (trunc_ln555_reg_280 and trunc_ln555_1_fu_211_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln20_fu_182_p2, trace_64_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (trace_64_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln20_fu_182_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, trace_64_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (trace_64_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln20_fu_182_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, trace_64_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (trace_64_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln20_fu_182_p2, trace_64_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (trace_64_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op60_write_state3, capture_64_TREADY_int)
    begin
                ap_block_state3_io <= ((capture_64_TREADY_int = ap_const_logic_0) and (ap_predicate_op60_write_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(ap_predicate_op63_write_state4, capture_64_TREADY_int)
    begin
                ap_block_state4_io <= ((capture_64_TREADY_int = ap_const_logic_0) and (ap_predicate_op63_write_state4 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln20_fu_182_p2)
    begin
        if ((icmp_ln20_fu_182_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_capture_64_data_V_U_apdone_blk)
    begin
        if (((regslice_both_capture_64_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_160_p4_assign_proc : process(icmp_ln20_fu_182_p2, i_0_reg_146, or_ln23_fu_225_p2, ap_phi_reg_pp0_iter0_i_1_reg_157, i_fu_231_p2)
    begin
        if ((icmp_ln20_fu_182_p2 = ap_const_lv1_1)) then
            if ((or_ln23_fu_225_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_i_1_phi_fu_160_p4 <= i_fu_231_p2;
            elsif ((or_ln23_fu_225_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_i_1_phi_fu_160_p4 <= i_0_reg_146;
            else 
                ap_phi_mux_i_1_phi_fu_160_p4 <= ap_phi_reg_pp0_iter0_i_1_reg_157;
            end if;
        else 
            ap_phi_mux_i_1_phi_fu_160_p4 <= ap_phi_reg_pp0_iter0_i_1_reg_157;
        end if; 
    end process;


    ap_phi_mux_match_0_phi_fu_139_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_286, or_ln23_reg_320, match_0_reg_135)
    begin
        if (((icmp_ln20_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_match_0_phi_fu_139_p4 <= or_ln23_reg_320;
        else 
            ap_phi_mux_match_0_phi_fu_139_p4 <= match_0_reg_135;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_i_1_reg_157 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op60_write_state3_assign_proc : process(icmp_ln20_reg_286, or_ln23_reg_320)
    begin
                ap_predicate_op60_write_state3 <= ((or_ln23_reg_320 = ap_const_lv1_1) and (icmp_ln20_reg_286 = ap_const_lv1_1));
    end process;


    ap_predicate_op63_write_state4_assign_proc : process(icmp_ln20_reg_286_pp0_iter1_reg, or_ln23_reg_320_pp0_iter1_reg)
    begin
                ap_predicate_op63_write_state4 <= ((or_ln23_reg_320_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln20_reg_286_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_capture_64_data_V_U_apdone_blk)
    begin
        if (((regslice_both_capture_64_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    capture_64_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_286, or_ln23_reg_320, ap_enable_reg_pp0_iter2, icmp_ln20_reg_286_pp0_iter1_reg, or_ln23_reg_320_pp0_iter1_reg, capture_64_TREADY_int)
    begin
        if ((((or_ln23_reg_320_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln20_reg_286_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_ln23_reg_320 = ap_const_lv1_1) and (icmp_ln20_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            capture_64_TDATA_blk_n <= capture_64_TREADY_int;
        else 
            capture_64_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    capture_64_TVALID <= regslice_both_capture_64_data_V_U_vld_out;

    capture_64_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op60_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op60_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            capture_64_TVALID_int <= ap_const_logic_1;
        else 
            capture_64_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_257_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_160_p4) + unsigned(ap_const_lv32_1));
    i_fu_231_p2 <= std_logic_vector(unsigned(i_0_reg_146) + unsigned(ap_const_lv32_FFFFFFFF));
    icmp_ln20_fu_182_p2 <= "1" when (signed(i_0_reg_146) < signed(length_read_reg_270)) else "0";
    icmp_ln23_fu_220_p2 <= "1" when (and_ln23_fu_215_p2 = trunc_ln555_reg_280) else "0";
    or_ln23_fu_225_p2 <= (icmp_ln23_fu_220_p2 or ap_phi_mux_match_0_phi_fu_139_p4);
    samples_fu_246_p2 <= std_logic_vector(unsigned(samples_1_fu_76) + unsigned(ap_const_lv32_1));

    trace_64_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln20_fu_182_p2, trace_64_TVALID_int)
    begin
        if (((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_TDATA_blk_n <= trace_64_TVALID_int;
        else 
            trace_64_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    trace_64_TREADY_assign_proc : process(trace_64_TVALID, regslice_both_trace_64_data_V_U_ack_in)
    begin
        if (((regslice_both_trace_64_data_V_U_ack_in = ap_const_logic_1) and (trace_64_TVALID = ap_const_logic_1))) then 
            trace_64_TREADY <= ap_const_logic_1;
        else 
            trace_64_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln20_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln20_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            trace_64_TREADY_int <= ap_const_logic_1;
        else 
            trace_64_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    trace_temp_last_V_fu_241_p2 <= "1" when (samples_1_fu_76 = add_ln27_reg_275) else "0";
    trunc_ln555_1_fu_211_p1 <= trace_64_TDATA_int(32 - 1 downto 0);
    trunc_ln555_fu_173_p1 <= trigger_V(32 - 1 downto 0);
end behav;
