-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_myproject_axi_exit52_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_local_V_data_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_0_V_empty_n : IN STD_LOGIC;
    out_local_V_data_0_V_read : OUT STD_LOGIC;
    out_local_V_data_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_1_V_empty_n : IN STD_LOGIC;
    out_local_V_data_1_V_read : OUT STD_LOGIC;
    out_local_V_data_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_2_V_empty_n : IN STD_LOGIC;
    out_local_V_data_2_V_read : OUT STD_LOGIC;
    out_local_V_data_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_3_V_empty_n : IN STD_LOGIC;
    out_local_V_data_3_V_read : OUT STD_LOGIC;
    out_local_V_data_4_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_4_V_empty_n : IN STD_LOGIC;
    out_local_V_data_4_V_read : OUT STD_LOGIC;
    out_local_V_data_5_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_5_V_empty_n : IN STD_LOGIC;
    out_local_V_data_5_V_read : OUT STD_LOGIC;
    out_local_V_data_6_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_6_V_empty_n : IN STD_LOGIC;
    out_local_V_data_6_V_read : OUT STD_LOGIC;
    out_local_V_data_7_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_7_V_empty_n : IN STD_LOGIC;
    out_local_V_data_7_V_read : OUT STD_LOGIC;
    out_local_V_data_8_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_8_V_empty_n : IN STD_LOGIC;
    out_local_V_data_8_V_read : OUT STD_LOGIC;
    out_local_V_data_9_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_local_V_data_9_V_empty_n : IN STD_LOGIC;
    out_local_V_data_9_V_read : OUT STD_LOGIC;
    tmp_data_V_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_0_ap_vld : OUT STD_LOGIC;
    tmp_data_V_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_1_ap_vld : OUT STD_LOGIC;
    tmp_data_V_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_2_ap_vld : OUT STD_LOGIC;
    tmp_data_V_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_3_ap_vld : OUT STD_LOGIC;
    tmp_data_V_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_4_ap_vld : OUT STD_LOGIC;
    tmp_data_V_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_5_ap_vld : OUT STD_LOGIC;
    tmp_data_V_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_6_ap_vld : OUT STD_LOGIC;
    tmp_data_V_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_7_ap_vld : OUT STD_LOGIC;
    tmp_data_V_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_8_ap_vld : OUT STD_LOGIC;
    tmp_data_V_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_data_V_9_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Block_myproject_axi_exit52_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_local_V_data_0_V_blk_n : STD_LOGIC;
    signal out_local_V_data_1_V_blk_n : STD_LOGIC;
    signal out_local_V_data_2_V_blk_n : STD_LOGIC;
    signal out_local_V_data_3_V_blk_n : STD_LOGIC;
    signal out_local_V_data_4_V_blk_n : STD_LOGIC;
    signal out_local_V_data_5_V_blk_n : STD_LOGIC;
    signal out_local_V_data_6_V_blk_n : STD_LOGIC;
    signal out_local_V_data_7_V_blk_n : STD_LOGIC;
    signal out_local_V_data_8_V_blk_n : STD_LOGIC;
    signal out_local_V_data_9_V_blk_n : STD_LOGIC;
    signal io_acc_block_signal_op12 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_V_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_data_V_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_0_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_0_preg <= out_local_V_data_0_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_1_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_1_preg <= out_local_V_data_1_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_2_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_2_preg <= out_local_V_data_2_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_3_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_3_preg <= out_local_V_data_3_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_4_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_4_preg <= out_local_V_data_4_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_5_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_5_preg <= out_local_V_data_5_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_6_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_6_preg <= out_local_V_data_6_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_7_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_7_preg <= out_local_V_data_7_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_8_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_8_preg <= out_local_V_data_8_V_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_data_V_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_data_V_9_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tmp_data_V_9_preg <= out_local_V_data_9_V_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, io_acc_block_signal_op12)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op12 <= (out_local_V_data_9_V_empty_n and out_local_V_data_8_V_empty_n and out_local_V_data_7_V_empty_n and out_local_V_data_6_V_empty_n and out_local_V_data_5_V_empty_n and out_local_V_data_4_V_empty_n and out_local_V_data_3_V_empty_n and out_local_V_data_2_V_empty_n and out_local_V_data_1_V_empty_n and out_local_V_data_0_V_empty_n);

    out_local_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_0_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_0_V_blk_n <= out_local_V_data_0_V_empty_n;
        else 
            out_local_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_0_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_0_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_1_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_1_V_blk_n <= out_local_V_data_1_V_empty_n;
        else 
            out_local_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_1_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_1_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_2_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_2_V_blk_n <= out_local_V_data_2_V_empty_n;
        else 
            out_local_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_2_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_2_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_3_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_3_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_3_V_blk_n <= out_local_V_data_3_V_empty_n;
        else 
            out_local_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_3_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_3_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_4_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_4_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_4_V_blk_n <= out_local_V_data_4_V_empty_n;
        else 
            out_local_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_4_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_4_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_5_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_5_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_5_V_blk_n <= out_local_V_data_5_V_empty_n;
        else 
            out_local_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_5_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_5_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_6_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_6_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_6_V_blk_n <= out_local_V_data_6_V_empty_n;
        else 
            out_local_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_6_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_6_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_7_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_7_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_7_V_blk_n <= out_local_V_data_7_V_empty_n;
        else 
            out_local_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_7_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_7_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_8_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_8_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_8_V_blk_n <= out_local_V_data_8_V_empty_n;
        else 
            out_local_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_8_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_8_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_9_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_9_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_9_V_blk_n <= out_local_V_data_9_V_empty_n;
        else 
            out_local_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_local_V_data_9_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_local_V_data_9_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_9_V_read <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_0_V_dout, io_acc_block_signal_op12, tmp_data_V_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_0 <= out_local_V_data_0_V_dout;
        else 
            tmp_data_V_0 <= tmp_data_V_0_preg;
        end if; 
    end process;


    tmp_data_V_0_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_0_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_1_V_dout, io_acc_block_signal_op12, tmp_data_V_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_1 <= out_local_V_data_1_V_dout;
        else 
            tmp_data_V_1 <= tmp_data_V_1_preg;
        end if; 
    end process;


    tmp_data_V_1_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_1_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_2_V_dout, io_acc_block_signal_op12, tmp_data_V_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_2 <= out_local_V_data_2_V_dout;
        else 
            tmp_data_V_2 <= tmp_data_V_2_preg;
        end if; 
    end process;


    tmp_data_V_2_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_2_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_3_V_dout, io_acc_block_signal_op12, tmp_data_V_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_3 <= out_local_V_data_3_V_dout;
        else 
            tmp_data_V_3 <= tmp_data_V_3_preg;
        end if; 
    end process;


    tmp_data_V_3_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_3_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_4_V_dout, io_acc_block_signal_op12, tmp_data_V_4_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_4 <= out_local_V_data_4_V_dout;
        else 
            tmp_data_V_4 <= tmp_data_V_4_preg;
        end if; 
    end process;


    tmp_data_V_4_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_4_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_5_V_dout, io_acc_block_signal_op12, tmp_data_V_5_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_5 <= out_local_V_data_5_V_dout;
        else 
            tmp_data_V_5 <= tmp_data_V_5_preg;
        end if; 
    end process;


    tmp_data_V_5_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_5_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_6_V_dout, io_acc_block_signal_op12, tmp_data_V_6_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_6 <= out_local_V_data_6_V_dout;
        else 
            tmp_data_V_6 <= tmp_data_V_6_preg;
        end if; 
    end process;


    tmp_data_V_6_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_6_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_7_V_dout, io_acc_block_signal_op12, tmp_data_V_7_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_7 <= out_local_V_data_7_V_dout;
        else 
            tmp_data_V_7 <= tmp_data_V_7_preg;
        end if; 
    end process;


    tmp_data_V_7_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_7_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_8_V_dout, io_acc_block_signal_op12, tmp_data_V_8_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_8 <= out_local_V_data_8_V_dout;
        else 
            tmp_data_V_8 <= tmp_data_V_8_preg;
        end if; 
    end process;


    tmp_data_V_8_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_8_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_V_9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_local_V_data_9_V_dout, io_acc_block_signal_op12, tmp_data_V_9_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_9 <= out_local_V_data_9_V_dout;
        else 
            tmp_data_V_9 <= tmp_data_V_9_preg;
        end if; 
    end process;


    tmp_data_V_9_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op12)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_data_V_9_ap_vld <= ap_const_logic_1;
        else 
            tmp_data_V_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
