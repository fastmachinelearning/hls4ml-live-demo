// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_myproject_axi_exit52_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_myproject_axi_exit52_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_myproject_axi_exit52_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Block_myproject_axi_exit52_proc::ap_ST_fsm_state1 = "1";
const sc_lv<32> Block_myproject_axi_exit52_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> Block_myproject_axi_exit52_proc::ap_const_lv8_0 = "00000000";
const bool Block_myproject_axi_exit52_proc::ap_const_boolean_1 = true;

Block_myproject_axi_exit52_proc::Block_myproject_axi_exit52_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_io_acc_block_signal_op12);
    sensitive << ( out_local_V_data_0_V_empty_n );
    sensitive << ( out_local_V_data_1_V_empty_n );
    sensitive << ( out_local_V_data_2_V_empty_n );
    sensitive << ( out_local_V_data_3_V_empty_n );
    sensitive << ( out_local_V_data_4_V_empty_n );
    sensitive << ( out_local_V_data_5_V_empty_n );
    sensitive << ( out_local_V_data_6_V_empty_n );
    sensitive << ( out_local_V_data_7_V_empty_n );
    sensitive << ( out_local_V_data_8_V_empty_n );
    sensitive << ( out_local_V_data_9_V_empty_n );

    SC_METHOD(thread_out_local_V_data_0_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_0_V_empty_n );

    SC_METHOD(thread_out_local_V_data_0_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_1_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_1_V_empty_n );

    SC_METHOD(thread_out_local_V_data_1_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_2_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_2_V_empty_n );

    SC_METHOD(thread_out_local_V_data_2_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_3_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_3_V_empty_n );

    SC_METHOD(thread_out_local_V_data_3_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_4_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_4_V_empty_n );

    SC_METHOD(thread_out_local_V_data_4_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_5_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_5_V_empty_n );

    SC_METHOD(thread_out_local_V_data_5_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_6_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_6_V_empty_n );

    SC_METHOD(thread_out_local_V_data_6_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_7_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_7_V_empty_n );

    SC_METHOD(thread_out_local_V_data_7_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_8_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_8_V_empty_n );

    SC_METHOD(thread_out_local_V_data_8_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_out_local_V_data_9_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_9_V_empty_n );

    SC_METHOD(thread_out_local_V_data_9_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_0_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_0_preg );

    SC_METHOD(thread_tmp_data_V_0_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_1_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_1_preg );

    SC_METHOD(thread_tmp_data_V_1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_2_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_2_preg );

    SC_METHOD(thread_tmp_data_V_2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_3);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_3_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_3_preg );

    SC_METHOD(thread_tmp_data_V_3_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_4);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_4_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_4_preg );

    SC_METHOD(thread_tmp_data_V_4_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_5);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_5_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_5_preg );

    SC_METHOD(thread_tmp_data_V_5_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_6);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_6_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_6_preg );

    SC_METHOD(thread_tmp_data_V_6_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_7);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_7_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_7_preg );

    SC_METHOD(thread_tmp_data_V_7_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_8);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_8_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_8_preg );

    SC_METHOD(thread_tmp_data_V_8_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_tmp_data_V_9);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_9_V_dout );
    sensitive << ( io_acc_block_signal_op12 );
    sensitive << ( tmp_data_V_9_preg );

    SC_METHOD(thread_tmp_data_V_9_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op12 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    tmp_data_V_0_preg = "00000000";
    tmp_data_V_1_preg = "00000000";
    tmp_data_V_2_preg = "00000000";
    tmp_data_V_3_preg = "00000000";
    tmp_data_V_4_preg = "00000000";
    tmp_data_V_5_preg = "00000000";
    tmp_data_V_6_preg = "00000000";
    tmp_data_V_7_preg = "00000000";
    tmp_data_V_8_preg = "00000000";
    tmp_data_V_9_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_myproject_axi_exit52_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_local_V_data_0_V_dout, "(port)out_local_V_data_0_V_dout");
    sc_trace(mVcdFile, out_local_V_data_0_V_empty_n, "(port)out_local_V_data_0_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_0_V_read, "(port)out_local_V_data_0_V_read");
    sc_trace(mVcdFile, out_local_V_data_1_V_dout, "(port)out_local_V_data_1_V_dout");
    sc_trace(mVcdFile, out_local_V_data_1_V_empty_n, "(port)out_local_V_data_1_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_1_V_read, "(port)out_local_V_data_1_V_read");
    sc_trace(mVcdFile, out_local_V_data_2_V_dout, "(port)out_local_V_data_2_V_dout");
    sc_trace(mVcdFile, out_local_V_data_2_V_empty_n, "(port)out_local_V_data_2_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_2_V_read, "(port)out_local_V_data_2_V_read");
    sc_trace(mVcdFile, out_local_V_data_3_V_dout, "(port)out_local_V_data_3_V_dout");
    sc_trace(mVcdFile, out_local_V_data_3_V_empty_n, "(port)out_local_V_data_3_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_3_V_read, "(port)out_local_V_data_3_V_read");
    sc_trace(mVcdFile, out_local_V_data_4_V_dout, "(port)out_local_V_data_4_V_dout");
    sc_trace(mVcdFile, out_local_V_data_4_V_empty_n, "(port)out_local_V_data_4_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_4_V_read, "(port)out_local_V_data_4_V_read");
    sc_trace(mVcdFile, out_local_V_data_5_V_dout, "(port)out_local_V_data_5_V_dout");
    sc_trace(mVcdFile, out_local_V_data_5_V_empty_n, "(port)out_local_V_data_5_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_5_V_read, "(port)out_local_V_data_5_V_read");
    sc_trace(mVcdFile, out_local_V_data_6_V_dout, "(port)out_local_V_data_6_V_dout");
    sc_trace(mVcdFile, out_local_V_data_6_V_empty_n, "(port)out_local_V_data_6_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_6_V_read, "(port)out_local_V_data_6_V_read");
    sc_trace(mVcdFile, out_local_V_data_7_V_dout, "(port)out_local_V_data_7_V_dout");
    sc_trace(mVcdFile, out_local_V_data_7_V_empty_n, "(port)out_local_V_data_7_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_7_V_read, "(port)out_local_V_data_7_V_read");
    sc_trace(mVcdFile, out_local_V_data_8_V_dout, "(port)out_local_V_data_8_V_dout");
    sc_trace(mVcdFile, out_local_V_data_8_V_empty_n, "(port)out_local_V_data_8_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_8_V_read, "(port)out_local_V_data_8_V_read");
    sc_trace(mVcdFile, out_local_V_data_9_V_dout, "(port)out_local_V_data_9_V_dout");
    sc_trace(mVcdFile, out_local_V_data_9_V_empty_n, "(port)out_local_V_data_9_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_9_V_read, "(port)out_local_V_data_9_V_read");
    sc_trace(mVcdFile, tmp_data_V_0, "(port)tmp_data_V_0");
    sc_trace(mVcdFile, tmp_data_V_0_ap_vld, "(port)tmp_data_V_0_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_1, "(port)tmp_data_V_1");
    sc_trace(mVcdFile, tmp_data_V_1_ap_vld, "(port)tmp_data_V_1_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_2, "(port)tmp_data_V_2");
    sc_trace(mVcdFile, tmp_data_V_2_ap_vld, "(port)tmp_data_V_2_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_3, "(port)tmp_data_V_3");
    sc_trace(mVcdFile, tmp_data_V_3_ap_vld, "(port)tmp_data_V_3_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_4, "(port)tmp_data_V_4");
    sc_trace(mVcdFile, tmp_data_V_4_ap_vld, "(port)tmp_data_V_4_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_5, "(port)tmp_data_V_5");
    sc_trace(mVcdFile, tmp_data_V_5_ap_vld, "(port)tmp_data_V_5_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_6, "(port)tmp_data_V_6");
    sc_trace(mVcdFile, tmp_data_V_6_ap_vld, "(port)tmp_data_V_6_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_7, "(port)tmp_data_V_7");
    sc_trace(mVcdFile, tmp_data_V_7_ap_vld, "(port)tmp_data_V_7_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_8, "(port)tmp_data_V_8");
    sc_trace(mVcdFile, tmp_data_V_8_ap_vld, "(port)tmp_data_V_8_ap_vld");
    sc_trace(mVcdFile, tmp_data_V_9, "(port)tmp_data_V_9");
    sc_trace(mVcdFile, tmp_data_V_9_ap_vld, "(port)tmp_data_V_9_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_local_V_data_0_V_blk_n, "out_local_V_data_0_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_1_V_blk_n, "out_local_V_data_1_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_2_V_blk_n, "out_local_V_data_2_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_3_V_blk_n, "out_local_V_data_3_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_4_V_blk_n, "out_local_V_data_4_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_5_V_blk_n, "out_local_V_data_5_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_6_V_blk_n, "out_local_V_data_6_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_7_V_blk_n, "out_local_V_data_7_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_8_V_blk_n, "out_local_V_data_8_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_9_V_blk_n, "out_local_V_data_9_V_blk_n");
    sc_trace(mVcdFile, io_acc_block_signal_op12, "io_acc_block_signal_op12");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_data_V_0_preg, "tmp_data_V_0_preg");
    sc_trace(mVcdFile, tmp_data_V_1_preg, "tmp_data_V_1_preg");
    sc_trace(mVcdFile, tmp_data_V_2_preg, "tmp_data_V_2_preg");
    sc_trace(mVcdFile, tmp_data_V_3_preg, "tmp_data_V_3_preg");
    sc_trace(mVcdFile, tmp_data_V_4_preg, "tmp_data_V_4_preg");
    sc_trace(mVcdFile, tmp_data_V_5_preg, "tmp_data_V_5_preg");
    sc_trace(mVcdFile, tmp_data_V_6_preg, "tmp_data_V_6_preg");
    sc_trace(mVcdFile, tmp_data_V_7_preg, "tmp_data_V_7_preg");
    sc_trace(mVcdFile, tmp_data_V_8_preg, "tmp_data_V_8_preg");
    sc_trace(mVcdFile, tmp_data_V_9_preg, "tmp_data_V_9_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_myproject_axi_exit52_proc::~Block_myproject_axi_exit52_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_myproject_axi_exit52_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_0_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_0_preg = out_local_V_data_0_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_1_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_1_preg = out_local_V_data_1_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_2_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_2_preg = out_local_V_data_2_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_3_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_3_preg = out_local_V_data_3_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_4_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_4_preg = out_local_V_data_4_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_5_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_5_preg = out_local_V_data_5_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_6_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_6_preg = out_local_V_data_6_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_7_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_7_preg = out_local_V_data_7_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_8_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_8_preg = out_local_V_data_8_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_data_V_9_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
            tmp_data_V_9_preg = out_local_V_data_9_V_dout.read();
        }
    }
}

void Block_myproject_axi_exit52_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_myproject_axi_exit52_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read()));
}

void Block_myproject_axi_exit52_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_io_acc_block_signal_op12() {
    io_acc_block_signal_op12 = (out_local_V_data_0_V_empty_n.read() & out_local_V_data_1_V_empty_n.read() & out_local_V_data_2_V_empty_n.read() & out_local_V_data_3_V_empty_n.read() & out_local_V_data_4_V_empty_n.read() & out_local_V_data_5_V_empty_n.read() & out_local_V_data_6_V_empty_n.read() & out_local_V_data_7_V_empty_n.read() & out_local_V_data_8_V_empty_n.read() & out_local_V_data_9_V_empty_n.read());
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_0_V_blk_n = out_local_V_data_0_V_empty_n.read();
    } else {
        out_local_V_data_0_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_0_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_0_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_1_V_blk_n = out_local_V_data_1_V_empty_n.read();
    } else {
        out_local_V_data_1_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_1_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_1_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_2_V_blk_n = out_local_V_data_2_V_empty_n.read();
    } else {
        out_local_V_data_2_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_2_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_2_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_3_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_3_V_blk_n = out_local_V_data_3_V_empty_n.read();
    } else {
        out_local_V_data_3_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_3_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_3_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_3_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_4_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_4_V_blk_n = out_local_V_data_4_V_empty_n.read();
    } else {
        out_local_V_data_4_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_4_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_4_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_4_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_5_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_5_V_blk_n = out_local_V_data_5_V_empty_n.read();
    } else {
        out_local_V_data_5_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_5_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_5_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_5_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_6_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_6_V_blk_n = out_local_V_data_6_V_empty_n.read();
    } else {
        out_local_V_data_6_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_6_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_6_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_6_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_7_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_7_V_blk_n = out_local_V_data_7_V_empty_n.read();
    } else {
        out_local_V_data_7_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_7_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_7_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_7_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_8_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_8_V_blk_n = out_local_V_data_8_V_empty_n.read();
    } else {
        out_local_V_data_8_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_8_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_8_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_8_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_9_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_9_V_blk_n = out_local_V_data_9_V_empty_n.read();
    } else {
        out_local_V_data_9_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit52_proc::thread_out_local_V_data_9_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        out_local_V_data_9_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_9_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_0 = out_local_V_data_0_V_dout.read();
    } else {
        tmp_data_V_0 = tmp_data_V_0_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_0_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_0_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_0_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_1 = out_local_V_data_1_V_dout.read();
    } else {
        tmp_data_V_1 = tmp_data_V_1_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_1_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_1_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_2 = out_local_V_data_2_V_dout.read();
    } else {
        tmp_data_V_2 = tmp_data_V_2_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_2_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_2_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_3 = out_local_V_data_3_V_dout.read();
    } else {
        tmp_data_V_3 = tmp_data_V_3_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_3_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_3_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_3_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_4 = out_local_V_data_4_V_dout.read();
    } else {
        tmp_data_V_4 = tmp_data_V_4_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_4_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_4_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_4_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_5 = out_local_V_data_5_V_dout.read();
    } else {
        tmp_data_V_5 = tmp_data_V_5_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_5_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_5_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_5_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_6 = out_local_V_data_6_V_dout.read();
    } else {
        tmp_data_V_6 = tmp_data_V_6_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_6_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_6_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_6_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_7 = out_local_V_data_7_V_dout.read();
    } else {
        tmp_data_V_7 = tmp_data_V_7_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_7_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_7_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_7_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_8 = out_local_V_data_8_V_dout.read();
    } else {
        tmp_data_V_8 = tmp_data_V_8_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_8_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_8_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_8_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_9 = out_local_V_data_9_V_dout.read();
    } else {
        tmp_data_V_9 = tmp_data_V_9_preg.read();
    }
}

void Block_myproject_axi_exit52_proc::thread_tmp_data_V_9_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op12.read())))) {
        tmp_data_V_9_ap_vld = ap_const_logic_1;
    } else {
        tmp_data_V_9_ap_vld = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit52_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

