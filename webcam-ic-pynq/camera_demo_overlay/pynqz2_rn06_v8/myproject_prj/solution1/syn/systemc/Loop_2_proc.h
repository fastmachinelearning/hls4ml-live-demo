// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_2_proc_HH_
#define _Loop_2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myproject_axi_mux_104_8_1_1.h"

namespace ap_rtl {

struct Loop_2_proc : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_in< sc_lv<1> > p_read;
    sc_in< sc_lv<8> > tmp_data_V_0;
    sc_in< sc_lv<8> > tmp_data_V_1;
    sc_in< sc_lv<8> > tmp_data_V_2;
    sc_in< sc_lv<8> > tmp_data_V_3;
    sc_in< sc_lv<8> > tmp_data_V_4;
    sc_in< sc_lv<8> > tmp_data_V_5;
    sc_in< sc_lv<8> > tmp_data_V_6;
    sc_in< sc_lv<8> > tmp_data_V_7;
    sc_in< sc_lv<8> > tmp_data_V_8;
    sc_in< sc_lv<8> > tmp_data_V_9;


    // Module declarations
    Loop_2_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_2_proc);

    ~Loop_2_proc();

    sc_trace_file* mVcdFile;

    myproject_axi_mux_104_8_1_1<1,1,8,8,8,8,8,8,8,8,8,8,4,8>* myproject_axi_mux_104_8_1_1_U3087;
    regslice_both<32>* regslice_both_out_data_U;
    regslice_both<1>* regslice_both_out_last_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<4> > j_fu_211_p2;
    sc_signal< sc_lv<4> > j_reg_563;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > regslice_both_out_data_U_apdone_blk;
    sc_signal< sc_lv<1> > last_fu_223_p2;
    sc_signal< sc_lv<1> > last_reg_568;
    sc_signal< sc_lv<1> > icmp_ln37_fu_205_p2;
    sc_signal< sc_lv<8> > tmp_V_3_fu_228_p12;
    sc_signal< sc_lv<8> > tmp_V_3_reg_573;
    sc_signal< sc_lv<1> > p_Result_6_reg_580;
    sc_signal< sc_lv<1> > icmp_ln935_fu_262_p2;
    sc_signal< sc_lv<1> > icmp_ln935_reg_586;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > tmp_V_4_fu_272_p3;
    sc_signal< sc_lv<8> > tmp_V_4_reg_591;
    sc_signal< sc_lv<32> > l_fu_296_p3;
    sc_signal< sc_lv<32> > l_reg_599;
    sc_signal< sc_lv<8> > trunc_ln943_fu_304_p1;
    sc_signal< sc_lv<8> > trunc_ln943_reg_604;
    sc_signal< sc_lv<32> > sub_ln944_fu_308_p2;
    sc_signal< sc_lv<32> > sub_ln944_reg_609;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > or_ln_i_fu_415_p3;
    sc_signal< sc_lv<32> > or_ln_i_reg_615;
    sc_signal< sc_lv<1> > icmp_ln958_fu_423_p2;
    sc_signal< sc_lv<1> > icmp_ln958_reg_620;
    sc_signal< sc_lv<63> > m_5_reg_625;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_137_reg_630;
    sc_signal< sc_lv<4> > j3_0_i_reg_194;
    sc_signal< sc_lv<1> > icmp_ln38_fu_217_p2;
    sc_signal< sc_lv<8> > tmp_V_fu_267_p2;
    sc_signal< sc_lv<8> > p_Result_s_fu_278_p4;
    sc_signal< sc_lv<32> > p_Result_7_fu_288_p3;
    sc_signal< sc_lv<32> > lsb_index_fu_317_p2;
    sc_signal< sc_lv<31> > tmp_fu_323_p4;
    sc_signal< sc_lv<4> > trunc_ln947_fu_339_p1;
    sc_signal< sc_lv<4> > sub_ln947_fu_343_p2;
    sc_signal< sc_lv<8> > zext_ln947_fu_349_p1;
    sc_signal< sc_lv<8> > lshr_ln947_fu_353_p2;
    sc_signal< sc_lv<8> > p_Result_4_fu_359_p2;
    sc_signal< sc_lv<1> > icmp_ln947_fu_333_p2;
    sc_signal< sc_lv<1> > icmp_ln947_1_fu_364_p2;
    sc_signal< sc_lv<1> > tmp_136_fu_376_p3;
    sc_signal< sc_lv<8> > trunc_ln944_fu_313_p1;
    sc_signal< sc_lv<8> > add_ln949_fu_390_p2;
    sc_signal< sc_lv<1> > p_Result_3_fu_396_p3;
    sc_signal< sc_lv<1> > xor_ln949_fu_384_p2;
    sc_signal< sc_lv<1> > and_ln949_fu_403_p2;
    sc_signal< sc_lv<1> > a_fu_370_p2;
    sc_signal< sc_lv<1> > or_ln949_fu_409_p2;
    sc_signal< sc_lv<32> > zext_ln957_1_fu_432_p1;
    sc_signal< sc_lv<32> > add_ln958_fu_435_p2;
    sc_signal< sc_lv<32> > lshr_ln958_fu_440_p2;
    sc_signal< sc_lv<32> > sub_ln958_fu_450_p2;
    sc_signal< sc_lv<64> > m_fu_429_p1;
    sc_signal< sc_lv<64> > zext_ln958_1_fu_455_p1;
    sc_signal< sc_lv<64> > zext_ln958_fu_446_p1;
    sc_signal< sc_lv<64> > shl_ln958_fu_459_p2;
    sc_signal< sc_lv<64> > zext_ln961_fu_472_p1;
    sc_signal< sc_lv<64> > m_1_fu_465_p3;
    sc_signal< sc_lv<64> > m_2_fu_475_p2;
    sc_signal< sc_lv<8> > sub_ln964_fu_509_p2;
    sc_signal< sc_lv<8> > select_ln964_fu_502_p3;
    sc_signal< sc_lv<8> > add_ln964_fu_514_p2;
    sc_signal< sc_lv<64> > m_6_fu_499_p1;
    sc_signal< sc_lv<9> > tmp_24_i_fu_520_p3;
    sc_signal< sc_lv<64> > p_Result_8_fu_527_p5;
    sc_signal< sc_lv<32> > trunc_ln738_fu_539_p1;
    sc_signal< sc_lv<32> > bitcast_ln739_fu_543_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_lv<32> > out_r_TDATA_int;
    sc_signal< sc_logic > out_r_TVALID_int;
    sc_signal< sc_logic > out_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_out_data_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<24> ap_const_lv24_FFFFFF;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_FFFFFFE8;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_E8;
    static const sc_lv<32> ap_const_lv32_FFFFFFE7;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_7E;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<32> ap_const_lv32_17;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_fu_370_p2();
    void thread_add_ln949_fu_390_p2();
    void thread_add_ln958_fu_435_p2();
    void thread_add_ln964_fu_514_p2();
    void thread_and_ln949_fu_403_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln739_fu_543_p1();
    void thread_icmp_ln37_fu_205_p2();
    void thread_icmp_ln38_fu_217_p2();
    void thread_icmp_ln935_fu_262_p2();
    void thread_icmp_ln947_1_fu_364_p2();
    void thread_icmp_ln947_fu_333_p2();
    void thread_icmp_ln958_fu_423_p2();
    void thread_j_fu_211_p2();
    void thread_l_fu_296_p3();
    void thread_last_fu_223_p2();
    void thread_lsb_index_fu_317_p2();
    void thread_lshr_ln947_fu_353_p2();
    void thread_lshr_ln958_fu_440_p2();
    void thread_m_1_fu_465_p3();
    void thread_m_2_fu_475_p2();
    void thread_m_6_fu_499_p1();
    void thread_m_fu_429_p1();
    void thread_or_ln949_fu_409_p2();
    void thread_or_ln_i_fu_415_p3();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TDATA_int();
    void thread_out_r_TVALID();
    void thread_out_r_TVALID_int();
    void thread_p_Result_3_fu_396_p3();
    void thread_p_Result_4_fu_359_p2();
    void thread_p_Result_7_fu_288_p3();
    void thread_p_Result_8_fu_527_p5();
    void thread_p_Result_s_fu_278_p4();
    void thread_select_ln964_fu_502_p3();
    void thread_shl_ln958_fu_459_p2();
    void thread_sub_ln944_fu_308_p2();
    void thread_sub_ln947_fu_343_p2();
    void thread_sub_ln958_fu_450_p2();
    void thread_sub_ln964_fu_509_p2();
    void thread_tmp_136_fu_376_p3();
    void thread_tmp_24_i_fu_520_p3();
    void thread_tmp_V_4_fu_272_p3();
    void thread_tmp_V_fu_267_p2();
    void thread_tmp_fu_323_p4();
    void thread_trunc_ln738_fu_539_p1();
    void thread_trunc_ln943_fu_304_p1();
    void thread_trunc_ln944_fu_313_p1();
    void thread_trunc_ln947_fu_339_p1();
    void thread_xor_ln949_fu_384_p2();
    void thread_zext_ln947_fu_349_p1();
    void thread_zext_ln957_1_fu_432_p1();
    void thread_zext_ln958_1_fu_455_p1();
    void thread_zext_ln958_fu_446_p1();
    void thread_zext_ln961_fu_472_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
